{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d143c8d8",
      "metadata": {
        "id": "d143c8d8"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "99203c53",
      "metadata": {
        "id": "99203c53",
        "outputId": "7bf02367-cdfd-4db6-b81c-dc05e6a36805"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\AppData\\Local\\Temp\\ipykernel_22964\\2947153712.py:2: DtypeWarning: Columns (7,8,16,17,19,21,23,25,27,29) have mixed types. Specify dtype option on import or set low_memory=False.\n",
            "  df2 = pd.read_csv('messages-demo.csv')\n"
          ]
        }
      ],
      "source": [
        "df1 = pd.read_csv('campaigns.csv')\n",
        "df2 = pd.read_csv('messages-demo.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "56882c7a",
      "metadata": {
        "id": "56882c7a",
        "outputId": "86428eaf-0007-4ed5-ad3c-0ab948943dfe"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_type</th>\n",
              "      <th>channel</th>\n",
              "      <th>topic</th>\n",
              "      <th>started_at</th>\n",
              "      <th>finished_at</th>\n",
              "      <th>total_count</th>\n",
              "      <th>ab_test</th>\n",
              "      <th>warmup_mode</th>\n",
              "      <th>hour_limit</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_emoji</th>\n",
              "      <th>subject_with_bonuses</th>\n",
              "      <th>subject_with_discount</th>\n",
              "      <th>subject_with_saleout</th>\n",
              "      <th>is_test</th>\n",
              "      <th>position</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-04-30 07:22:36.615023</td>\n",
              "      <td>2021-04-30 07:23:41</td>\n",
              "      <td>48211.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>146.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>64</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-04-30 09:02:50.817227</td>\n",
              "      <td>2021-04-30 09:04:08</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>78</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-05-06 07:14:10.533318</td>\n",
              "      <td>2021-05-06 07:15:17</td>\n",
              "      <td>70080.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>146.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>79</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-05-06 09:03:56.486750</td>\n",
              "      <td>2021-05-06 09:42:15</td>\n",
              "      <td>921838.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>89</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-05-07 11:54:06.168664</td>\n",
              "      <td>2021-05-07 11:54:38</td>\n",
              "      <td>45503.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>109.0</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1825</th>\n",
              "      <td>12039</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>leave review</td>\n",
              "      <td>2023-04-20 15:45:12.083421</td>\n",
              "      <td>2023-04-20 15:45:28</td>\n",
              "      <td>232.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1826</th>\n",
              "      <td>12052</td>\n",
              "      <td>bulk</td>\n",
              "      <td>email</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2023-04-21 10:55:57.160554</td>\n",
              "      <td>2023-04-21 16:09:50</td>\n",
              "      <td>3932219.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>88.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1827</th>\n",
              "      <td>12057</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>happy birthday</td>\n",
              "      <td>2023-04-21 09:00:14.149364</td>\n",
              "      <td>2023-04-21 09:01:10</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>96.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1828</th>\n",
              "      <td>12073</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>leave review</td>\n",
              "      <td>2023-04-21 14:49:31.835109</td>\n",
              "      <td>2023-04-21 14:49:54</td>\n",
              "      <td>62.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1829</th>\n",
              "      <td>12074</td>\n",
              "      <td>bulk</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>leave review</td>\n",
              "      <td>2023-04-21 15:30:14.136724</td>\n",
              "      <td>2023-04-21 15:30:35</td>\n",
              "      <td>233.0</td>\n",
              "      <td>NaN</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1830 rows × 19 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         id campaign_type      channel           topic  \\\n",
              "0        63          bulk  mobile_push        sale out   \n",
              "1        64          bulk  mobile_push        sale out   \n",
              "2        78          bulk  mobile_push        sale out   \n",
              "3        79          bulk  mobile_push        sale out   \n",
              "4        89          bulk  mobile_push             NaN   \n",
              "...     ...           ...          ...             ...   \n",
              "1825  12039          bulk  mobile_push    leave review   \n",
              "1826  12052          bulk        email        sale out   \n",
              "1827  12057          bulk  mobile_push  happy birthday   \n",
              "1828  12073          bulk  mobile_push    leave review   \n",
              "1829  12074          bulk  mobile_push    leave review   \n",
              "\n",
              "                      started_at          finished_at  total_count ab_test  \\\n",
              "0     2021-04-30 07:22:36.615023  2021-04-30 07:23:41      48211.0     NaN   \n",
              "1     2021-04-30 09:02:50.817227  2021-04-30 09:04:08    1037337.0     NaN   \n",
              "2     2021-05-06 07:14:10.533318  2021-05-06 07:15:17      70080.0     NaN   \n",
              "3     2021-05-06 09:03:56.486750  2021-05-06 09:42:15     921838.0     NaN   \n",
              "4     2021-05-07 11:54:06.168664  2021-05-07 11:54:38      45503.0     NaN   \n",
              "...                          ...                  ...          ...     ...   \n",
              "1825  2023-04-20 15:45:12.083421  2023-04-20 15:45:28        232.0     NaN   \n",
              "1826  2023-04-21 10:55:57.160554  2023-04-21 16:09:50    3932219.0     NaN   \n",
              "1827  2023-04-21 09:00:14.149364  2023-04-21 09:01:10       2015.0     NaN   \n",
              "1828  2023-04-21 14:49:31.835109  2023-04-21 14:49:54         62.0     NaN   \n",
              "1829  2023-04-21 15:30:14.136724  2023-04-21 15:30:35        233.0     NaN   \n",
              "\n",
              "     warmup_mode  hour_limit  subject_length subject_with_personalization  \\\n",
              "0          False         NaN           146.0                        False   \n",
              "1          False         NaN            97.0                        False   \n",
              "2          False         NaN           146.0                        False   \n",
              "3          False         NaN            97.0                        False   \n",
              "4          False         NaN           109.0                        False   \n",
              "...          ...         ...             ...                          ...   \n",
              "1825       False         NaN           112.0                        False   \n",
              "1826       False         NaN            88.0                        False   \n",
              "1827       False         NaN            96.0                        False   \n",
              "1828       False         NaN           112.0                        False   \n",
              "1829       False         NaN           112.0                        False   \n",
              "\n",
              "     subject_with_deadline subject_with_emoji subject_with_bonuses  \\\n",
              "0                    False               True                False   \n",
              "1                    False               True                False   \n",
              "2                    False               True                False   \n",
              "3                    False               True                False   \n",
              "4                     True               True                False   \n",
              "...                    ...                ...                  ...   \n",
              "1825                 False               True                 True   \n",
              "1826                 False               True                False   \n",
              "1827                 False               True                 True   \n",
              "1828                 False               True                 True   \n",
              "1829                 False               True                 True   \n",
              "\n",
              "     subject_with_discount subject_with_saleout is_test  position  \n",
              "0                    False                False     NaN       NaN  \n",
              "1                    False                False     NaN       NaN  \n",
              "2                    False                False     NaN       NaN  \n",
              "3                    False                False     NaN       NaN  \n",
              "4                    False                False     NaN       NaN  \n",
              "...                    ...                  ...     ...       ...  \n",
              "1825                 False                False     NaN       NaN  \n",
              "1826                 False                False     NaN       NaN  \n",
              "1827                 False                False     NaN       NaN  \n",
              "1828                 False                False     NaN       NaN  \n",
              "1829                 False                False     NaN       NaN  \n",
              "\n",
              "[1830 rows x 19 columns]"
            ]
          },
          "execution_count": 3,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df1 = df1[df1.campaign_type=='bulk']\n",
        "df1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fcdbe3fc",
      "metadata": {
        "id": "fcdbe3fc",
        "outputId": "afc84939-136e-46cb-88f4-c4976252ff8a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 1830 entries, 0 to 1829\n",
            "Data columns (total 19 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   id                            1830 non-null   int64  \n",
            " 1   campaign_type                 1830 non-null   object \n",
            " 2   channel                       1830 non-null   object \n",
            " 3   topic                         1804 non-null   object \n",
            " 4   started_at                    1824 non-null   object \n",
            " 5   finished_at                   1808 non-null   object \n",
            " 6   total_count                   1824 non-null   float64\n",
            " 7   ab_test                       12 non-null     object \n",
            " 8   warmup_mode                   1830 non-null   object \n",
            " 9   hour_limit                    31 non-null     float64\n",
            " 10  subject_length                1830 non-null   float64\n",
            " 11  subject_with_personalization  1830 non-null   object \n",
            " 12  subject_with_deadline         1830 non-null   object \n",
            " 13  subject_with_emoji            1830 non-null   object \n",
            " 14  subject_with_bonuses          1830 non-null   object \n",
            " 15  subject_with_discount         1830 non-null   object \n",
            " 16  subject_with_saleout          1830 non-null   object \n",
            " 17  is_test                       0 non-null      object \n",
            " 18  position                      0 non-null      float64\n",
            "dtypes: float64(4), int64(1), object(14)\n",
            "memory usage: 285.9+ KB\n"
          ]
        }
      ],
      "source": [
        "df1.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "07008b12",
      "metadata": {
        "id": "07008b12",
        "outputId": "e60bd9df-09e9-4a3f-e0a3-4fc691501b6b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "subject_with_saleout\n",
              "False    1792\n",
              "True       38\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#a = df1[['subject_with_personalization','subject_with_deadline','subject_with_emoji','subject_with_bonuses','subject_with_discount','subject_with_saleout']]\n",
        "df1['subject_with_saleout'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "14e2d7c6",
      "metadata": {
        "id": "14e2d7c6",
        "outputId": "2ad84522-9767-4996-c379-08a84c8cd7ca"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>campaign_type</th>\n",
              "      <th>topic</th>\n",
              "      <th>started_at</th>\n",
              "      <th>finished_at</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_emoji</th>\n",
              "      <th>subject_with_bonuses</th>\n",
              "      <th>subject_with_discount</th>\n",
              "      <th>subject_with_saleout</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>63</td>\n",
              "      <td>bulk</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-04-30 07:22:36.615023</td>\n",
              "      <td>2021-04-30 07:23:41</td>\n",
              "      <td>48211.0</td>\n",
              "      <td>146.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>64</td>\n",
              "      <td>bulk</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-04-30 09:02:50.817227</td>\n",
              "      <td>2021-04-30 09:04:08</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>78</td>\n",
              "      <td>bulk</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-05-06 07:14:10.533318</td>\n",
              "      <td>2021-05-06 07:15:17</td>\n",
              "      <td>70080.0</td>\n",
              "      <td>146.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>79</td>\n",
              "      <td>bulk</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2021-05-06 09:03:56.486750</td>\n",
              "      <td>2021-05-06 09:42:15</td>\n",
              "      <td>921838.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>89</td>\n",
              "      <td>bulk</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2021-05-07 11:54:06.168664</td>\n",
              "      <td>2021-05-07 11:54:38</td>\n",
              "      <td>45503.0</td>\n",
              "      <td>109.0</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1825</th>\n",
              "      <td>12039</td>\n",
              "      <td>bulk</td>\n",
              "      <td>leave review</td>\n",
              "      <td>2023-04-20 15:45:12.083421</td>\n",
              "      <td>2023-04-20 15:45:28</td>\n",
              "      <td>232.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1826</th>\n",
              "      <td>12052</td>\n",
              "      <td>bulk</td>\n",
              "      <td>sale out</td>\n",
              "      <td>2023-04-21 10:55:57.160554</td>\n",
              "      <td>2023-04-21 16:09:50</td>\n",
              "      <td>3932219.0</td>\n",
              "      <td>88.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1827</th>\n",
              "      <td>12057</td>\n",
              "      <td>bulk</td>\n",
              "      <td>happy birthday</td>\n",
              "      <td>2023-04-21 09:00:14.149364</td>\n",
              "      <td>2023-04-21 09:01:10</td>\n",
              "      <td>2015.0</td>\n",
              "      <td>96.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1828</th>\n",
              "      <td>12073</td>\n",
              "      <td>bulk</td>\n",
              "      <td>leave review</td>\n",
              "      <td>2023-04-21 14:49:31.835109</td>\n",
              "      <td>2023-04-21 14:49:54</td>\n",
              "      <td>62.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1829</th>\n",
              "      <td>12074</td>\n",
              "      <td>bulk</td>\n",
              "      <td>leave review</td>\n",
              "      <td>2023-04-21 15:30:14.136724</td>\n",
              "      <td>2023-04-21 15:30:35</td>\n",
              "      <td>233.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1818 rows × 13 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "      campaign_id campaign_type           topic                  started_at  \\\n",
              "0              63          bulk        sale out  2021-04-30 07:22:36.615023   \n",
              "1              64          bulk        sale out  2021-04-30 09:02:50.817227   \n",
              "2              78          bulk        sale out  2021-05-06 07:14:10.533318   \n",
              "3              79          bulk        sale out  2021-05-06 09:03:56.486750   \n",
              "4              89          bulk             NaN  2021-05-07 11:54:06.168664   \n",
              "...           ...           ...             ...                         ...   \n",
              "1825        12039          bulk    leave review  2023-04-20 15:45:12.083421   \n",
              "1826        12052          bulk        sale out  2023-04-21 10:55:57.160554   \n",
              "1827        12057          bulk  happy birthday  2023-04-21 09:00:14.149364   \n",
              "1828        12073          bulk    leave review  2023-04-21 14:49:31.835109   \n",
              "1829        12074          bulk    leave review  2023-04-21 15:30:14.136724   \n",
              "\n",
              "              finished_at  total_count  subject_length  \\\n",
              "0     2021-04-30 07:23:41      48211.0           146.0   \n",
              "1     2021-04-30 09:04:08    1037337.0            97.0   \n",
              "2     2021-05-06 07:15:17      70080.0           146.0   \n",
              "3     2021-05-06 09:42:15     921838.0            97.0   \n",
              "4     2021-05-07 11:54:38      45503.0           109.0   \n",
              "...                   ...          ...             ...   \n",
              "1825  2023-04-20 15:45:28        232.0           112.0   \n",
              "1826  2023-04-21 16:09:50    3932219.0            88.0   \n",
              "1827  2023-04-21 09:01:10       2015.0            96.0   \n",
              "1828  2023-04-21 14:49:54         62.0           112.0   \n",
              "1829  2023-04-21 15:30:35        233.0           112.0   \n",
              "\n",
              "     subject_with_personalization subject_with_deadline subject_with_emoji  \\\n",
              "0                           False                 False               True   \n",
              "1                           False                 False               True   \n",
              "2                           False                 False               True   \n",
              "3                           False                 False               True   \n",
              "4                           False                  True               True   \n",
              "...                           ...                   ...                ...   \n",
              "1825                        False                 False               True   \n",
              "1826                        False                 False               True   \n",
              "1827                        False                 False               True   \n",
              "1828                        False                 False               True   \n",
              "1829                        False                 False               True   \n",
              "\n",
              "     subject_with_bonuses subject_with_discount subject_with_saleout  \n",
              "0                   False                 False                False  \n",
              "1                   False                 False                False  \n",
              "2                   False                 False                False  \n",
              "3                   False                 False                False  \n",
              "4                   False                 False                False  \n",
              "...                   ...                   ...                  ...  \n",
              "1825                 True                 False                False  \n",
              "1826                False                 False                False  \n",
              "1827                 True                 False                False  \n",
              "1828                 True                 False                False  \n",
              "1829                 True                 False                False  \n",
              "\n",
              "[1818 rows x 13 columns]"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df1 = df1[df1.ab_test.isnull()==True]\n",
        "df1 = df1[df1.is_test.isnull()==True]\n",
        "df1 = df1.drop(['warmup_mode','hour_limit','ab_test','is_test','position','channel'],axis=1)\n",
        "df1 = df1.rename(columns={'id':'campaign_id'})\n",
        "df1"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "647e7fda",
      "metadata": {
        "id": "647e7fda",
        "outputId": "31aa85c1-e019-44bb-a6df-7fdfcb475bba"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>message_type</th>\n",
              "      <th>client_id</th>\n",
              "      <th>channel</th>\n",
              "      <th>stream</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3527358</td>\n",
              "      <td>31</td>\n",
              "      <td>transactional</td>\n",
              "      <td>1515915625489833514</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>t</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>t</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>3527619</td>\n",
              "      <td>32</td>\n",
              "      <td>transactional</td>\n",
              "      <td>1515915625489220445</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3527980</td>\n",
              "      <td>32</td>\n",
              "      <td>transactional</td>\n",
              "      <td>1515915625489854185</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3528369</td>\n",
              "      <td>32</td>\n",
              "      <td>transactional</td>\n",
              "      <td>1515915625489101550</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>3528648</td>\n",
              "      <td>32</td>\n",
              "      <td>transactional</td>\n",
              "      <td>1515915625490455948</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>t</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "        id  campaign_id   message_type            client_id channel   stream  \\\n",
              "0  3527358           31  transactional  1515915625489833514   email  desktop   \n",
              "1  3527619           32  transactional  1515915625489220445   email  desktop   \n",
              "2  3527980           32  transactional  1515915625489854185   email  desktop   \n",
              "3  3528369           32  transactional  1515915625489101550   email  desktop   \n",
              "4  3528648           32  transactional  1515915625490455948   email  desktop   \n",
              "\n",
              "  is_opened is_clicked is_unsubscribed is_complained is_blocked is_purchased  \n",
              "0         t          t               f             f          f            t  \n",
              "1         t          f               f             f          f            f  \n",
              "2         t          f               f             f          f            f  \n",
              "3         t          f               f             f          f            f  \n",
              "4         t          f               f             f          f            f  "
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df2 = df2[['id','campaign_id','message_type','client_id','channel','stream','is_opened','is_clicked','is_unsubscribed','is_complained','is_blocked','is_purchased']]\n",
        "df2.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "85b32d0d",
      "metadata": {
        "id": "85b32d0d",
        "outputId": "5b27c1bf-918b-4f61-bd21-56048a0a2cb1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "is_opened\n",
              "f    6860407\n",
              "t    1296206\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df2.is_opened.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9551c310",
      "metadata": {
        "id": "9551c310"
      },
      "outputs": [],
      "source": [
        "## To test \"Opened\" we used random sample\n",
        "## To test \"Clicked\" we used all Opened=1\n",
        "## To test Purchased, we get all Opened=1 since the fragment in the random sample is too small"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3fe00a0b",
      "metadata": {
        "scrolled": false,
        "id": "3fe00a0b",
        "outputId": "a8734eec-79c8-4ca5-9c77-bdc833e4fdfa"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>message_type</th>\n",
              "      <th>client_id</th>\n",
              "      <th>channel</th>\n",
              "      <th>stream</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5161994</th>\n",
              "      <td>57733927</td>\n",
              "      <td>143</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625491061094</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7225037</th>\n",
              "      <td>59297456</td>\n",
              "      <td>231</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625489631797</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4820504</th>\n",
              "      <td>57456878</td>\n",
              "      <td>136</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625559648850</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3090023</th>\n",
              "      <td>56236991</td>\n",
              "      <td>111</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625547867447</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7406334</th>\n",
              "      <td>59485472</td>\n",
              "      <td>231</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625583553348</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5065158</th>\n",
              "      <td>57635236</td>\n",
              "      <td>143</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625488574604</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>338760</th>\n",
              "      <td>54232366</td>\n",
              "      <td>64</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625601196827</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3564841</th>\n",
              "      <td>56711956</td>\n",
              "      <td>111</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625621269549</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1581338</th>\n",
              "      <td>55098587</td>\n",
              "      <td>79</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625489636746</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1105316</th>\n",
              "      <td>54999679</td>\n",
              "      <td>64</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625633620006</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1220393 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "               id  campaign_id message_type            client_id      channel  \\\n",
              "5161994  57733927          143         bulk  1515915625491061094        email   \n",
              "7225037  59297456          231         bulk  1515915625489631797  mobile_push   \n",
              "4820504  57456878          136         bulk  1515915625559648850        email   \n",
              "3090023  56236991          111         bulk  1515915625547867447  mobile_push   \n",
              "7406334  59485472          231         bulk  1515915625583553348  mobile_push   \n",
              "...           ...          ...          ...                  ...          ...   \n",
              "5065158  57635236          143         bulk  1515915625488574604        email   \n",
              "338760   54232366           64         bulk  1515915625601196827  mobile_push   \n",
              "3564841  56711956          111         bulk  1515915625621269549  mobile_push   \n",
              "1581338  55098587           79         bulk  1515915625489636746  mobile_push   \n",
              "1105316  54999679           64         bulk  1515915625633620006  mobile_push   \n",
              "\n",
              "          stream is_opened is_clicked is_unsubscribed is_complained  \\\n",
              "5161994  desktop         f          f               f             f   \n",
              "7225037  desktop         f          f               f             f   \n",
              "4820504  desktop         f          f               f             f   \n",
              "3090023  desktop         f          f               f             f   \n",
              "7406334  desktop         f          f               f             f   \n",
              "...          ...       ...        ...             ...           ...   \n",
              "5065158  desktop         f          f               f             f   \n",
              "338760   desktop         f          f               f             f   \n",
              "3564841  desktop         f          f               f             f   \n",
              "1581338  desktop         f          f               f             f   \n",
              "1105316  desktop         f          f               f             f   \n",
              "\n",
              "        is_blocked is_purchased  \n",
              "5161994          f            f  \n",
              "7225037          f            f  \n",
              "4820504          f            f  \n",
              "3090023          f            f  \n",
              "7406334          f            f  \n",
              "...            ...          ...  \n",
              "5065158          f            f  \n",
              "338760           f            f  \n",
              "3564841          f            f  \n",
              "1581338          f            f  \n",
              "1105316          f            f  \n",
              "\n",
              "[1220393 rows x 12 columns]"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "message = df2[df2.message_type=='bulk'].sample(frac=0.2, random_state=123)\n",
        "message"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "3ec56e2c",
      "metadata": {
        "id": "3ec56e2c",
        "outputId": "7e19a2ef-5462-4c7d-850a-b5aa255e33da"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "is_opened\n",
              "f    1049119\n",
              "t     171274\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "message['is_opened'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e0fffb21",
      "metadata": {
        "id": "e0fffb21",
        "outputId": "26db3a26-c821-4a25-cf5c-50f759a1dd2b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>message_type</th>\n",
              "      <th>client_id</th>\n",
              "      <th>channel</th>\n",
              "      <th>stream</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>...</th>\n",
              "      <th>started_at</th>\n",
              "      <th>finished_at</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_emoji</th>\n",
              "      <th>subject_with_bonuses</th>\n",
              "      <th>subject_with_discount</th>\n",
              "      <th>subject_with_saleout</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>57733927</td>\n",
              "      <td>143</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625491061094</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-20 08:00:16.293566</td>\n",
              "      <td>2021-05-20 08:57:18</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59297456</td>\n",
              "      <td>231</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625489631797</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-27 13:00:10.254783</td>\n",
              "      <td>2021-05-27 13:00:46</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>57456878</td>\n",
              "      <td>136</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625559648850</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-19 07:00:11.121170</td>\n",
              "      <td>2021-05-19 08:03:19</td>\n",
              "      <td>177363.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56236991</td>\n",
              "      <td>111</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625547867447</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-12 07:44:41.865082</td>\n",
              "      <td>2021-05-12 08:16:07</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59485472</td>\n",
              "      <td>231</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625583553348</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-27 13:00:10.254783</td>\n",
              "      <td>2021-05-27 13:00:46</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220388</th>\n",
              "      <td>57635236</td>\n",
              "      <td>143</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625488574604</td>\n",
              "      <td>email</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-20 08:00:16.293566</td>\n",
              "      <td>2021-05-20 08:57:18</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220389</th>\n",
              "      <td>54232366</td>\n",
              "      <td>64</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625601196827</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-04-30 09:02:50.817227</td>\n",
              "      <td>2021-04-30 09:04:08</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220390</th>\n",
              "      <td>56711956</td>\n",
              "      <td>111</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625621269549</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-12 07:44:41.865082</td>\n",
              "      <td>2021-05-12 08:16:07</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220391</th>\n",
              "      <td>55098587</td>\n",
              "      <td>79</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625489636746</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-05-06 09:03:56.486750</td>\n",
              "      <td>2021-05-06 09:42:15</td>\n",
              "      <td>921838.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220392</th>\n",
              "      <td>54999679</td>\n",
              "      <td>64</td>\n",
              "      <td>bulk</td>\n",
              "      <td>1515915625633620006</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>desktop</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>...</td>\n",
              "      <td>2021-04-30 09:02:50.817227</td>\n",
              "      <td>2021-04-30 09:04:08</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>True</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1220393 rows × 24 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "               id  campaign_id message_type            client_id      channel  \\\n",
              "0        57733927          143         bulk  1515915625491061094        email   \n",
              "1        59297456          231         bulk  1515915625489631797  mobile_push   \n",
              "2        57456878          136         bulk  1515915625559648850        email   \n",
              "3        56236991          111         bulk  1515915625547867447  mobile_push   \n",
              "4        59485472          231         bulk  1515915625583553348  mobile_push   \n",
              "...           ...          ...          ...                  ...          ...   \n",
              "1220388  57635236          143         bulk  1515915625488574604        email   \n",
              "1220389  54232366           64         bulk  1515915625601196827  mobile_push   \n",
              "1220390  56711956          111         bulk  1515915625621269549  mobile_push   \n",
              "1220391  55098587           79         bulk  1515915625489636746  mobile_push   \n",
              "1220392  54999679           64         bulk  1515915625633620006  mobile_push   \n",
              "\n",
              "          stream is_opened is_clicked is_unsubscribed is_complained  ...  \\\n",
              "0        desktop         f          f               f             f  ...   \n",
              "1        desktop         f          f               f             f  ...   \n",
              "2        desktop         f          f               f             f  ...   \n",
              "3        desktop         f          f               f             f  ...   \n",
              "4        desktop         f          f               f             f  ...   \n",
              "...          ...       ...        ...             ...           ...  ...   \n",
              "1220388  desktop         f          f               f             f  ...   \n",
              "1220389  desktop         f          f               f             f  ...   \n",
              "1220390  desktop         f          f               f             f  ...   \n",
              "1220391  desktop         f          f               f             f  ...   \n",
              "1220392  desktop         f          f               f             f  ...   \n",
              "\n",
              "                         started_at          finished_at total_count  \\\n",
              "0        2021-05-20 08:00:16.293566  2021-05-20 08:57:18    283063.0   \n",
              "1        2021-05-27 13:00:10.254783  2021-05-27 13:00:46     93204.0   \n",
              "2        2021-05-19 07:00:11.121170  2021-05-19 08:03:19    177363.0   \n",
              "3        2021-05-12 07:44:41.865082  2021-05-12 08:16:07   1045217.0   \n",
              "4        2021-05-27 13:00:10.254783  2021-05-27 13:00:46     93204.0   \n",
              "...                             ...                  ...         ...   \n",
              "1220388  2021-05-20 08:00:16.293566  2021-05-20 08:57:18    283063.0   \n",
              "1220389  2021-04-30 09:02:50.817227  2021-04-30 09:04:08   1037337.0   \n",
              "1220390  2021-05-12 07:44:41.865082  2021-05-12 08:16:07   1045217.0   \n",
              "1220391  2021-05-06 09:03:56.486750  2021-05-06 09:42:15    921838.0   \n",
              "1220392  2021-04-30 09:02:50.817227  2021-04-30 09:04:08   1037337.0   \n",
              "\n",
              "        subject_length subject_with_personalization subject_with_deadline  \\\n",
              "0                112.0                        False                 False   \n",
              "1                 32.0                        False                 False   \n",
              "2                133.0                        False                 False   \n",
              "3                 97.0                        False                 False   \n",
              "4                 32.0                        False                 False   \n",
              "...                ...                          ...                   ...   \n",
              "1220388          112.0                        False                 False   \n",
              "1220389           97.0                        False                 False   \n",
              "1220390           97.0                        False                 False   \n",
              "1220391           97.0                        False                 False   \n",
              "1220392           97.0                        False                 False   \n",
              "\n",
              "         subject_with_emoji  subject_with_bonuses subject_with_discount  \\\n",
              "0                      True                 False                 False   \n",
              "1                      True                 False                 False   \n",
              "2                      True                 False                 False   \n",
              "3                      True                 False                 False   \n",
              "4                      True                 False                 False   \n",
              "...                     ...                   ...                   ...   \n",
              "1220388                True                 False                 False   \n",
              "1220389                True                 False                 False   \n",
              "1220390                True                 False                 False   \n",
              "1220391                True                 False                 False   \n",
              "1220392                True                 False                 False   \n",
              "\n",
              "        subject_with_saleout  \n",
              "0                      False  \n",
              "1                      False  \n",
              "2                      False  \n",
              "3                      False  \n",
              "4                      False  \n",
              "...                      ...  \n",
              "1220388                False  \n",
              "1220389                False  \n",
              "1220390                False  \n",
              "1220391                False  \n",
              "1220392                False  \n",
              "\n",
              "[1220393 rows x 24 columns]"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = pd.merge(message,df1,on='campaign_id',how='left')\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "29b7413a",
      "metadata": {
        "id": "29b7413a",
        "outputId": "d9758903-0f9a-4bc0-cb42-8c5780359288"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "subject_with_personalization\n",
            "False    1219096\n",
            "True        1297\n",
            "Name: count, dtype: int64\n",
            "subject_with_deadline\n",
            "False    1211340\n",
            "True        9053\n",
            "Name: count, dtype: int64\n",
            "subject_with_emoji\n",
            "True    1220393\n",
            "Name: count, dtype: int64\n",
            "subject_with_bonuses\n",
            "False    1220393\n",
            "Name: count, dtype: int64\n",
            "subject_with_discount\n",
            "False    1219096\n",
            "True        1297\n",
            "Name: count, dtype: int64\n",
            "subject_with_saleout\n",
            "False    1220393\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(df['subject_with_personalization'].value_counts())\n",
        "print(df['subject_with_deadline'].value_counts())\n",
        "print(df['subject_with_emoji'].value_counts())\n",
        "print(df['subject_with_bonuses'].value_counts())\n",
        "print(df['subject_with_discount'].value_counts())\n",
        "print(df['subject_with_saleout'].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "784a19a9",
      "metadata": {
        "id": "784a19a9",
        "outputId": "82c005f8-49f5-4b97-ad95-f94aff49a5cb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "message_type\n",
            "bulk    1220393\n",
            "Name: count, dtype: int64\n",
            "stream\n",
            "desktop    1220393\n",
            "Name: count, dtype: int64\n",
            "topic\n",
            "sale out    1204361\n",
            "event          1623\n",
            "Name: count, dtype: int64\n"
          ]
        }
      ],
      "source": [
        "print(df['message_type'].value_counts())\n",
        "print(df['stream'].value_counts())\n",
        "print(df['topic'].value_counts())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "49ca7040",
      "metadata": {
        "id": "49ca7040",
        "outputId": "225df516-ad9c-4e56-c17e-5692a0ba04be"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>channel</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>57733927</td>\n",
              "      <td>143</td>\n",
              "      <td>email</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59297456</td>\n",
              "      <td>231</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>57456878</td>\n",
              "      <td>136</td>\n",
              "      <td>email</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>177363.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56236991</td>\n",
              "      <td>111</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59485472</td>\n",
              "      <td>231</td>\n",
              "      <td>mobile_push</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         id  campaign_id      channel is_opened is_clicked is_unsubscribed  \\\n",
              "0  57733927          143        email         f          f               f   \n",
              "1  59297456          231  mobile_push         f          f               f   \n",
              "2  57456878          136        email         f          f               f   \n",
              "3  56236991          111  mobile_push         f          f               f   \n",
              "4  59485472          231  mobile_push         f          f               f   \n",
              "\n",
              "  is_complained is_blocked is_purchased  total_count  subject_length  \\\n",
              "0             f          f            f     283063.0           112.0   \n",
              "1             f          f            f      93204.0            32.0   \n",
              "2             f          f            f     177363.0           133.0   \n",
              "3             f          f            f    1045217.0            97.0   \n",
              "4             f          f            f      93204.0            32.0   \n",
              "\n",
              "  subject_with_personalization subject_with_deadline subject_with_discount  \n",
              "0                        False                 False                 False  \n",
              "1                        False                 False                 False  \n",
              "2                        False                 False                 False  \n",
              "3                        False                 False                 False  \n",
              "4                        False                 False                 False  "
            ]
          },
          "execution_count": 17,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## Drop the useless columns (will not be used in the later analysis part)\n",
        "## Drop \"topic\" since the fraction of \"event\" is too small\n",
        "df = df.drop(['client_id','started_at','finished_at','campaign_type','topic'],axis=1)\n",
        "\n",
        "## Only one type of value in these columns so drop these columns (cannot give us any insight in the analysis)\n",
        "df = df.drop(['subject_with_emoji','subject_with_bonuses','subject_with_saleout','message_type','stream'],axis=1)\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1479e286",
      "metadata": {
        "id": "1479e286",
        "outputId": "2e50e8ad-3120-4cca-b608-7487c09cc593"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "channel\n",
              "mobile_push    785031\n",
              "email          435362\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df['channel'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9b19c50b",
      "metadata": {
        "id": "9b19c50b",
        "outputId": "dc273cf2-2132-478f-e02a-ec47a585c2cd"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>is_email</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>57733927</td>\n",
              "      <td>143</td>\n",
              "      <td>1</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59297456</td>\n",
              "      <td>231</td>\n",
              "      <td>0</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>57456878</td>\n",
              "      <td>136</td>\n",
              "      <td>1</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>177363.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56236991</td>\n",
              "      <td>111</td>\n",
              "      <td>0</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59485472</td>\n",
              "      <td>231</td>\n",
              "      <td>0</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>f</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "      <td>False</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         id  campaign_id  is_email is_opened is_clicked is_unsubscribed  \\\n",
              "0  57733927          143         1         f          f               f   \n",
              "1  59297456          231         0         f          f               f   \n",
              "2  57456878          136         1         f          f               f   \n",
              "3  56236991          111         0         f          f               f   \n",
              "4  59485472          231         0         f          f               f   \n",
              "\n",
              "  is_complained is_blocked is_purchased  total_count  subject_length  \\\n",
              "0             f          f            f     283063.0           112.0   \n",
              "1             f          f            f      93204.0            32.0   \n",
              "2             f          f            f     177363.0           133.0   \n",
              "3             f          f            f    1045217.0            97.0   \n",
              "4             f          f            f      93204.0            32.0   \n",
              "\n",
              "  subject_with_personalization subject_with_deadline subject_with_discount  \n",
              "0                        False                 False                 False  \n",
              "1                        False                 False                 False  \n",
              "2                        False                 False                 False  \n",
              "3                        False                 False                 False  \n",
              "4                        False                 False                 False  "
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## Transform \"channel\" into dummy variable \"is_email\"\n",
        "df.channel = df.channel.replace({'mobile_push':0,'email':1})\n",
        "df = df.rename(columns={'channel':'is_email'})\n",
        "\n",
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "28b7e377",
      "metadata": {
        "id": "28b7e377",
        "outputId": "3f855bf4-5592-4856-95f0-145518a3d88d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['id', 'campaign_id', 'is_email', 'is_opened', 'is_clicked',\n",
              "       'is_unsubscribed', 'is_complained', 'is_blocked', 'is_purchased',\n",
              "       'total_count', 'subject_length', 'subject_with_personalization',\n",
              "       'subject_with_deadline', 'subject_with_discount'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.columns"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "20c657ff",
      "metadata": {
        "id": "20c657ff",
        "outputId": "3ab59aee-0667-4286-ea48-e276e75c09f2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>is_email</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>57733927</td>\n",
              "      <td>143</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59297456</td>\n",
              "      <td>231</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>57456878</td>\n",
              "      <td>136</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>177363.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56236991</td>\n",
              "      <td>111</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59485472</td>\n",
              "      <td>231</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220388</th>\n",
              "      <td>57635236</td>\n",
              "      <td>143</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220389</th>\n",
              "      <td>54232366</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220390</th>\n",
              "      <td>56711956</td>\n",
              "      <td>111</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220391</th>\n",
              "      <td>55098587</td>\n",
              "      <td>79</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>921838.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220392</th>\n",
              "      <td>54999679</td>\n",
              "      <td>64</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1220393 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "               id  campaign_id  is_email is_opened is_clicked is_unsubscribed  \\\n",
              "0        57733927          143         1         0          0               0   \n",
              "1        59297456          231         0         0          0               0   \n",
              "2        57456878          136         1         0          0               0   \n",
              "3        56236991          111         0         0          0               0   \n",
              "4        59485472          231         0         0          0               0   \n",
              "...           ...          ...       ...       ...        ...             ...   \n",
              "1220388  57635236          143         1         0          0               0   \n",
              "1220389  54232366           64         0         0          0               0   \n",
              "1220390  56711956          111         0         0          0               0   \n",
              "1220391  55098587           79         0         0          0               0   \n",
              "1220392  54999679           64         0         0          0               0   \n",
              "\n",
              "        is_complained is_blocked is_purchased  total_count  subject_length  \\\n",
              "0                   0          0            0     283063.0           112.0   \n",
              "1                   0          0            0      93204.0            32.0   \n",
              "2                   0          0            0     177363.0           133.0   \n",
              "3                   0          0            0    1045217.0            97.0   \n",
              "4                   0          0            0      93204.0            32.0   \n",
              "...               ...        ...          ...          ...             ...   \n",
              "1220388             0          0            0     283063.0           112.0   \n",
              "1220389             0          0            0    1037337.0            97.0   \n",
              "1220390             0          0            0    1045217.0            97.0   \n",
              "1220391             0          0            0     921838.0            97.0   \n",
              "1220392             0          0            0    1037337.0            97.0   \n",
              "\n",
              "        subject_with_personalization subject_with_deadline  \\\n",
              "0                                  0                     0   \n",
              "1                                  0                     0   \n",
              "2                                  0                     0   \n",
              "3                                  0                     0   \n",
              "4                                  0                     0   \n",
              "...                              ...                   ...   \n",
              "1220388                            0                     0   \n",
              "1220389                            0                     0   \n",
              "1220390                            0                     0   \n",
              "1220391                            0                     0   \n",
              "1220392                            0                     0   \n",
              "\n",
              "        subject_with_discount  \n",
              "0                           0  \n",
              "1                           0  \n",
              "2                           0  \n",
              "3                           0  \n",
              "4                           0  \n",
              "...                       ...  \n",
              "1220388                     0  \n",
              "1220389                     0  \n",
              "1220390                     0  \n",
              "1220391                     0  \n",
              "1220392                     0  \n",
              "\n",
              "[1220393 rows x 14 columns]"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## Transform categorical columns into dummay variables\n",
        "df.iloc[:,3:9] = df.iloc[:,3:9].replace({'f':0,'t':1})\n",
        "df.iloc[:,11:] = df.iloc[:,11:].replace({False:0,True:1})\n",
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ac4f0a43",
      "metadata": {
        "id": "ac4f0a43"
      },
      "outputs": [],
      "source": [
        "#df.to_csv('final_cleaning_data.csv',index=False)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a5583fd4",
      "metadata": {
        "id": "a5583fd4",
        "outputId": "f9e9622d-f11f-4f79-82c8-ac692e5dafa9"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1220393 entries, 0 to 1220392\n",
            "Data columns (total 14 columns):\n",
            " #   Column                        Non-Null Count    Dtype  \n",
            "---  ------                        --------------    -----  \n",
            " 0   id                            1220393 non-null  int64  \n",
            " 1   campaign_id                   1220393 non-null  int64  \n",
            " 2   is_email                      1220393 non-null  int64  \n",
            " 3   is_opened                     1220393 non-null  object \n",
            " 4   is_clicked                    1220393 non-null  object \n",
            " 5   is_unsubscribed               1220393 non-null  object \n",
            " 6   is_complained                 1220393 non-null  object \n",
            " 7   is_blocked                    1220393 non-null  object \n",
            " 8   is_purchased                  1220393 non-null  object \n",
            " 9   total_count                   1220393 non-null  float64\n",
            " 10  subject_length                1220393 non-null  float64\n",
            " 11  subject_with_personalization  1220393 non-null  object \n",
            " 12  subject_with_deadline         1220393 non-null  object \n",
            " 13  subject_with_discount         1220393 non-null  object \n",
            "dtypes: float64(2), int64(3), object(9)\n",
            "memory usage: 130.4+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "efb28853",
      "metadata": {
        "id": "efb28853",
        "outputId": "4abe4309-2d87-4f95-baa7-03b1c333dc73"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>is_email</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>5.701995e+07</td>\n",
              "      <td>1.282177e+02</td>\n",
              "      <td>3.567392e-01</td>\n",
              "      <td>1.403433e-01</td>\n",
              "      <td>1.157086e-02</td>\n",
              "      <td>4.629328e-02</td>\n",
              "      <td>2.966258e-04</td>\n",
              "      <td>4.097041e-06</td>\n",
              "      <td>2.802376e-04</td>\n",
              "      <td>7.093923e+05</td>\n",
              "      <td>1.083089e+02</td>\n",
              "      <td>1.062772e-03</td>\n",
              "      <td>7.418102e-03</td>\n",
              "      <td>1.062772e-03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.761352e+06</td>\n",
              "      <td>5.559509e+01</td>\n",
              "      <td>4.790371e-01</td>\n",
              "      <td>3.473430e-01</td>\n",
              "      <td>1.069439e-01</td>\n",
              "      <td>2.101196e-01</td>\n",
              "      <td>1.722028e-02</td>\n",
              "      <td>2.024112e-03</td>\n",
              "      <td>1.673796e-02</td>\n",
              "      <td>3.580102e+05</td>\n",
              "      <td>2.040697e+01</td>\n",
              "      <td>3.258288e-02</td>\n",
              "      <td>8.580839e-02</td>\n",
              "      <td>3.258288e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>5.396788e+07</td>\n",
              "      <td>6.300000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>3.000000e+00</td>\n",
              "      <td>3.200000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>5.549337e+07</td>\n",
              "      <td>7.900000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>2.830630e+05</td>\n",
              "      <td>9.700000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>5.702082e+07</td>\n",
              "      <td>1.110000e+02</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>7.813540e+05</td>\n",
              "      <td>9.700000e+01</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>5.854558e+07</td>\n",
              "      <td>1.500000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>1.037337e+06</td>\n",
              "      <td>1.150000e+02</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>6.006982e+07</td>\n",
              "      <td>2.570000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.045217e+06</td>\n",
              "      <td>1.850000e+02</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 id   campaign_id      is_email     is_opened    is_clicked  \\\n",
              "count  1.220393e+06  1.220393e+06  1.220393e+06  1.220393e+06  1.220393e+06   \n",
              "mean   5.701995e+07  1.282177e+02  3.567392e-01  1.403433e-01  1.157086e-02   \n",
              "std    1.761352e+06  5.559509e+01  4.790371e-01  3.473430e-01  1.069439e-01   \n",
              "min    5.396788e+07  6.300000e+01  0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "25%    5.549337e+07  7.900000e+01  0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "50%    5.702082e+07  1.110000e+02  0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "75%    5.854558e+07  1.500000e+02  1.000000e+00  0.000000e+00  0.000000e+00   \n",
              "max    6.006982e+07  2.570000e+02  1.000000e+00  1.000000e+00  1.000000e+00   \n",
              "\n",
              "       is_unsubscribed  is_complained    is_blocked  is_purchased  \\\n",
              "count     1.220393e+06   1.220393e+06  1.220393e+06  1.220393e+06   \n",
              "mean      4.629328e-02   2.966258e-04  4.097041e-06  2.802376e-04   \n",
              "std       2.101196e-01   1.722028e-02  2.024112e-03  1.673796e-02   \n",
              "min       0.000000e+00   0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "25%       0.000000e+00   0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "50%       0.000000e+00   0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "75%       0.000000e+00   0.000000e+00  0.000000e+00  0.000000e+00   \n",
              "max       1.000000e+00   1.000000e+00  1.000000e+00  1.000000e+00   \n",
              "\n",
              "        total_count  subject_length  subject_with_personalization  \\\n",
              "count  1.220393e+06    1.220393e+06                  1.220393e+06   \n",
              "mean   7.093923e+05    1.083089e+02                  1.062772e-03   \n",
              "std    3.580102e+05    2.040697e+01                  3.258288e-02   \n",
              "min    3.000000e+00    3.200000e+01                  0.000000e+00   \n",
              "25%    2.830630e+05    9.700000e+01                  0.000000e+00   \n",
              "50%    7.813540e+05    9.700000e+01                  0.000000e+00   \n",
              "75%    1.037337e+06    1.150000e+02                  0.000000e+00   \n",
              "max    1.045217e+06    1.850000e+02                  1.000000e+00   \n",
              "\n",
              "       subject_with_deadline  subject_with_discount  \n",
              "count           1.220393e+06           1.220393e+06  \n",
              "mean            7.418102e-03           1.062772e-03  \n",
              "std             8.580839e-02           3.258288e-02  \n",
              "min             0.000000e+00           0.000000e+00  \n",
              "25%             0.000000e+00           0.000000e+00  \n",
              "50%             0.000000e+00           0.000000e+00  \n",
              "75%             0.000000e+00           0.000000e+00  \n",
              "max             1.000000e+00           1.000000e+00  "
            ]
          },
          "execution_count": 23,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df = df.astype(float)\n",
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "46992719",
      "metadata": {
        "id": "46992719",
        "outputId": "845a6d25-dee9-4a74-c1c2-06c0f3887825"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>is_email</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.067836</td>\n",
              "      <td>0.135595</td>\n",
              "      <td>-0.151926</td>\n",
              "      <td>0.023131</td>\n",
              "      <td>0.002718</td>\n",
              "      <td>0.022482</td>\n",
              "      <td>-0.306355</td>\n",
              "      <td>0.499267</td>\n",
              "      <td>0.043800</td>\n",
              "      <td>-0.064379</td>\n",
              "      <td>0.043800</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_opened</th>\n",
              "      <td>0.067836</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.267779</td>\n",
              "      <td>-0.077579</td>\n",
              "      <td>0.008520</td>\n",
              "      <td>0.000348</td>\n",
              "      <td>0.041437</td>\n",
              "      <td>-0.021133</td>\n",
              "      <td>0.099471</td>\n",
              "      <td>0.017882</td>\n",
              "      <td>0.004962</td>\n",
              "      <td>0.017882</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_clicked</th>\n",
              "      <td>0.135595</td>\n",
              "      <td>0.267779</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.022160</td>\n",
              "      <td>0.002141</td>\n",
              "      <td>-0.000219</td>\n",
              "      <td>0.154744</td>\n",
              "      <td>-0.010293</td>\n",
              "      <td>0.105558</td>\n",
              "      <td>0.014343</td>\n",
              "      <td>-0.009353</td>\n",
              "      <td>0.014343</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <td>-0.151926</td>\n",
              "      <td>-0.077579</td>\n",
              "      <td>-0.022160</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.002663</td>\n",
              "      <td>-0.000446</td>\n",
              "      <td>-0.003456</td>\n",
              "      <td>0.118453</td>\n",
              "      <td>-0.098754</td>\n",
              "      <td>-0.007067</td>\n",
              "      <td>-0.015547</td>\n",
              "      <td>-0.007067</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_complained</th>\n",
              "      <td>0.023131</td>\n",
              "      <td>0.008520</td>\n",
              "      <td>0.002141</td>\n",
              "      <td>-0.002663</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.000035</td>\n",
              "      <td>-0.000288</td>\n",
              "      <td>-0.005293</td>\n",
              "      <td>0.011594</td>\n",
              "      <td>-0.000562</td>\n",
              "      <td>-0.001489</td>\n",
              "      <td>-0.000562</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_blocked</th>\n",
              "      <td>0.002718</td>\n",
              "      <td>0.000348</td>\n",
              "      <td>-0.000219</td>\n",
              "      <td>-0.000446</td>\n",
              "      <td>-0.000035</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.000034</td>\n",
              "      <td>-0.001876</td>\n",
              "      <td>0.000604</td>\n",
              "      <td>-0.000066</td>\n",
              "      <td>-0.000175</td>\n",
              "      <td>-0.000066</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_purchased</th>\n",
              "      <td>0.022482</td>\n",
              "      <td>0.041437</td>\n",
              "      <td>0.154744</td>\n",
              "      <td>-0.003456</td>\n",
              "      <td>-0.000288</td>\n",
              "      <td>-0.000034</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.002599</td>\n",
              "      <td>0.016059</td>\n",
              "      <td>0.002459</td>\n",
              "      <td>-0.001447</td>\n",
              "      <td>0.002459</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_count</th>\n",
              "      <td>-0.306355</td>\n",
              "      <td>-0.021133</td>\n",
              "      <td>-0.010293</td>\n",
              "      <td>0.118453</td>\n",
              "      <td>-0.005293</td>\n",
              "      <td>-0.001876</td>\n",
              "      <td>-0.002599</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.328961</td>\n",
              "      <td>-0.064051</td>\n",
              "      <td>-0.160311</td>\n",
              "      <td>-0.064051</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_length</th>\n",
              "      <td>0.499267</td>\n",
              "      <td>0.099471</td>\n",
              "      <td>0.105558</td>\n",
              "      <td>-0.098754</td>\n",
              "      <td>0.011594</td>\n",
              "      <td>0.000604</td>\n",
              "      <td>0.016059</td>\n",
              "      <td>-0.328961</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.122579</td>\n",
              "      <td>0.002928</td>\n",
              "      <td>0.122579</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <td>0.043800</td>\n",
              "      <td>0.017882</td>\n",
              "      <td>0.014343</td>\n",
              "      <td>-0.007067</td>\n",
              "      <td>-0.000562</td>\n",
              "      <td>-0.000066</td>\n",
              "      <td>0.002459</td>\n",
              "      <td>-0.064051</td>\n",
              "      <td>0.122579</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.002820</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <td>-0.064379</td>\n",
              "      <td>0.004962</td>\n",
              "      <td>-0.009353</td>\n",
              "      <td>-0.015547</td>\n",
              "      <td>-0.001489</td>\n",
              "      <td>-0.000175</td>\n",
              "      <td>-0.001447</td>\n",
              "      <td>-0.160311</td>\n",
              "      <td>0.002928</td>\n",
              "      <td>-0.002820</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.002820</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_with_discount</th>\n",
              "      <td>0.043800</td>\n",
              "      <td>0.017882</td>\n",
              "      <td>0.014343</td>\n",
              "      <td>-0.007067</td>\n",
              "      <td>-0.000562</td>\n",
              "      <td>-0.000066</td>\n",
              "      <td>0.002459</td>\n",
              "      <td>-0.064051</td>\n",
              "      <td>0.122579</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.002820</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                              is_email  is_opened  is_clicked  \\\n",
              "is_email                      1.000000   0.067836    0.135595   \n",
              "is_opened                     0.067836   1.000000    0.267779   \n",
              "is_clicked                    0.135595   0.267779    1.000000   \n",
              "is_unsubscribed              -0.151926  -0.077579   -0.022160   \n",
              "is_complained                 0.023131   0.008520    0.002141   \n",
              "is_blocked                    0.002718   0.000348   -0.000219   \n",
              "is_purchased                  0.022482   0.041437    0.154744   \n",
              "total_count                  -0.306355  -0.021133   -0.010293   \n",
              "subject_length                0.499267   0.099471    0.105558   \n",
              "subject_with_personalization  0.043800   0.017882    0.014343   \n",
              "subject_with_deadline        -0.064379   0.004962   -0.009353   \n",
              "subject_with_discount         0.043800   0.017882    0.014343   \n",
              "\n",
              "                              is_unsubscribed  is_complained  is_blocked  \\\n",
              "is_email                            -0.151926       0.023131    0.002718   \n",
              "is_opened                           -0.077579       0.008520    0.000348   \n",
              "is_clicked                          -0.022160       0.002141   -0.000219   \n",
              "is_unsubscribed                      1.000000      -0.002663   -0.000446   \n",
              "is_complained                       -0.002663       1.000000   -0.000035   \n",
              "is_blocked                          -0.000446      -0.000035    1.000000   \n",
              "is_purchased                        -0.003456      -0.000288   -0.000034   \n",
              "total_count                          0.118453      -0.005293   -0.001876   \n",
              "subject_length                      -0.098754       0.011594    0.000604   \n",
              "subject_with_personalization        -0.007067      -0.000562   -0.000066   \n",
              "subject_with_deadline               -0.015547      -0.001489   -0.000175   \n",
              "subject_with_discount               -0.007067      -0.000562   -0.000066   \n",
              "\n",
              "                              is_purchased  total_count  subject_length  \\\n",
              "is_email                          0.022482    -0.306355        0.499267   \n",
              "is_opened                         0.041437    -0.021133        0.099471   \n",
              "is_clicked                        0.154744    -0.010293        0.105558   \n",
              "is_unsubscribed                  -0.003456     0.118453       -0.098754   \n",
              "is_complained                    -0.000288    -0.005293        0.011594   \n",
              "is_blocked                       -0.000034    -0.001876        0.000604   \n",
              "is_purchased                      1.000000    -0.002599        0.016059   \n",
              "total_count                      -0.002599     1.000000       -0.328961   \n",
              "subject_length                    0.016059    -0.328961        1.000000   \n",
              "subject_with_personalization      0.002459    -0.064051        0.122579   \n",
              "subject_with_deadline            -0.001447    -0.160311        0.002928   \n",
              "subject_with_discount             0.002459    -0.064051        0.122579   \n",
              "\n",
              "                              subject_with_personalization  \\\n",
              "is_email                                          0.043800   \n",
              "is_opened                                         0.017882   \n",
              "is_clicked                                        0.014343   \n",
              "is_unsubscribed                                  -0.007067   \n",
              "is_complained                                    -0.000562   \n",
              "is_blocked                                       -0.000066   \n",
              "is_purchased                                      0.002459   \n",
              "total_count                                      -0.064051   \n",
              "subject_length                                    0.122579   \n",
              "subject_with_personalization                      1.000000   \n",
              "subject_with_deadline                            -0.002820   \n",
              "subject_with_discount                             1.000000   \n",
              "\n",
              "                              subject_with_deadline  subject_with_discount  \n",
              "is_email                                  -0.064379               0.043800  \n",
              "is_opened                                  0.004962               0.017882  \n",
              "is_clicked                                -0.009353               0.014343  \n",
              "is_unsubscribed                           -0.015547              -0.007067  \n",
              "is_complained                             -0.001489              -0.000562  \n",
              "is_blocked                                -0.000175              -0.000066  \n",
              "is_purchased                              -0.001447               0.002459  \n",
              "total_count                               -0.160311              -0.064051  \n",
              "subject_length                             0.002928               0.122579  \n",
              "subject_with_personalization              -0.002820               1.000000  \n",
              "subject_with_deadline                      1.000000              -0.002820  \n",
              "subject_with_discount                     -0.002820               1.000000  "
            ]
          },
          "execution_count": 24,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.drop([\"id\",\"campaign_id\"], axis=1).corr()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "37d709c5",
      "metadata": {
        "id": "37d709c5",
        "outputId": "4b945ad7-1f45-49f2-86e5-480753c6365a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_opened</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>0.343609</td>\n",
              "      <td>712449.352848</td>\n",
              "      <td>107.488693</td>\n",
              "      <td>0.000827</td>\n",
              "      <td>0.007246</td>\n",
              "      <td>0.000827</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>0.437165</td>\n",
              "      <td>690666.824807</td>\n",
              "      <td>113.332783</td>\n",
              "      <td>0.002505</td>\n",
              "      <td>0.008472</td>\n",
              "      <td>0.002505</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           is_email    total_count  subject_length  \\\n",
              "is_opened                                            \n",
              "0.0        0.343609  712449.352848      107.488693   \n",
              "1.0        0.437165  690666.824807      113.332783   \n",
              "\n",
              "           subject_with_personalization  subject_with_deadline  \\\n",
              "is_opened                                                        \n",
              "0.0                            0.000827               0.007246   \n",
              "1.0                            0.002505               0.008472   \n",
              "\n",
              "           subject_with_discount  \n",
              "is_opened                         \n",
              "0.0                     0.000827  \n",
              "1.0                     0.002505  "
            ]
          },
          "execution_count": 25,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "var = ['is_email','total_count', 'subject_length', 'subject_with_personalization','subject_with_deadline', 'subject_with_discount']\n",
        "\n",
        "df.groupby(\"is_opened\")[var].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "798ef9f5",
      "metadata": {
        "id": "798ef9f5",
        "outputId": "177b9143-786b-447b-f63a-ad482d44215b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_clicked</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>0.349711</td>\n",
              "      <td>709791.005215</td>\n",
              "      <td>108.075805</td>\n",
              "      <td>0.001012</td>\n",
              "      <td>0.007505</td>\n",
              "      <td>0.001012</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>0.957085</td>\n",
              "      <td>675335.098081</td>\n",
              "      <td>128.218327</td>\n",
              "      <td>0.005382</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.005382</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            is_email    total_count  subject_length  \\\n",
              "is_clicked                                            \n",
              "0.0         0.349711  709791.005215      108.075805   \n",
              "1.0         0.957085  675335.098081      128.218327   \n",
              "\n",
              "            subject_with_personalization  subject_with_deadline  \\\n",
              "is_clicked                                                        \n",
              "0.0                             0.001012               0.007505   \n",
              "1.0                             0.005382               0.000000   \n",
              "\n",
              "            subject_with_discount  \n",
              "is_clicked                         \n",
              "0.0                      0.001012  \n",
              "1.0                      0.005382  "
            ]
          },
          "execution_count": 26,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.groupby(\"is_clicked\")[var].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "303c996f",
      "metadata": {
        "id": "303c996f",
        "outputId": "db62bd38-88e0-456f-93e7-2112cf7eb855"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_purchased</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>0.356559</td>\n",
              "      <td>709407.896373</td>\n",
              "      <td>108.303385</td>\n",
              "      <td>0.001061</td>\n",
              "      <td>0.00742</td>\n",
              "      <td>0.001061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>653827.441520</td>\n",
              "      <td>127.883041</td>\n",
              "      <td>0.005848</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.005848</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              is_email    total_count  subject_length  \\\n",
              "is_purchased                                            \n",
              "0.0           0.356559  709407.896373      108.303385   \n",
              "1.0           1.000000  653827.441520      127.883041   \n",
              "\n",
              "              subject_with_personalization  subject_with_deadline  \\\n",
              "is_purchased                                                        \n",
              "0.0                               0.001061                0.00742   \n",
              "1.0                               0.005848                0.00000   \n",
              "\n",
              "              subject_with_discount  \n",
              "is_purchased                         \n",
              "0.0                        0.001061  \n",
              "1.0                        0.005848  "
            ]
          },
          "execution_count": 27,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.groupby(\"is_purchased\")[var].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "161679e7",
      "metadata": {
        "id": "161679e7",
        "outputId": "e6a9175b-6e8d-47b9-86f2-27642b09c912"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>0.372774</td>\n",
              "      <td>700049.163317</td>\n",
              "      <td>108.752872</td>\n",
              "      <td>0.001114</td>\n",
              "      <td>0.007712</td>\n",
              "      <td>0.001114</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>0.026409</td>\n",
              "      <td>901874.492460</td>\n",
              "      <td>99.161834</td>\n",
              "      <td>0.000018</td>\n",
              "      <td>0.001363</td>\n",
              "      <td>0.000018</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                 is_email    total_count  subject_length  \\\n",
              "is_unsubscribed                                            \n",
              "0.0              0.372774  700049.163317      108.752872   \n",
              "1.0              0.026409  901874.492460       99.161834   \n",
              "\n",
              "                 subject_with_personalization  subject_with_deadline  \\\n",
              "is_unsubscribed                                                        \n",
              "0.0                                  0.001114               0.007712   \n",
              "1.0                                  0.000018               0.001363   \n",
              "\n",
              "                 subject_with_discount  \n",
              "is_unsubscribed                         \n",
              "0.0                           0.001114  \n",
              "1.0                           0.000018  "
            ]
          },
          "execution_count": 28,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.groupby(\"is_unsubscribed\")[var].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a1e8089b",
      "metadata": {
        "id": "a1e8089b",
        "outputId": "3e31d810-ad5f-4b02-9ef7-a4e5c63f0cca"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_complained</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>0.356548</td>\n",
              "      <td>709424.959067</td>\n",
              "      <td>108.304796</td>\n",
              "      <td>0.001063</td>\n",
              "      <td>0.00742</td>\n",
              "      <td>0.001063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>599392.618785</td>\n",
              "      <td>122.044199</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "               is_email    total_count  subject_length  \\\n",
              "is_complained                                            \n",
              "0.0            0.356548  709424.959067      108.304796   \n",
              "1.0            1.000000  599392.618785      122.044199   \n",
              "\n",
              "               subject_with_personalization  subject_with_deadline  \\\n",
              "is_complained                                                        \n",
              "0.0                                0.001063                0.00742   \n",
              "1.0                                0.000000                0.00000   \n",
              "\n",
              "               subject_with_discount  \n",
              "is_complained                         \n",
              "0.0                         0.001063  \n",
              "1.0                         0.000000  "
            ]
          },
          "execution_count": 29,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.groupby(\"is_complained\")[var].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "bda3219d",
      "metadata": {
        "id": "bda3219d",
        "outputId": "1881a44e-c0ca-4114-9648-cb0ce119f957"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_blocked</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>0.356737</td>\n",
              "      <td>709393.679753</td>\n",
              "      <td>108.308847</td>\n",
              "      <td>0.001063</td>\n",
              "      <td>0.007418</td>\n",
              "      <td>0.001063</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>377663.200000</td>\n",
              "      <td>114.400000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            is_email    total_count  subject_length  \\\n",
              "is_blocked                                            \n",
              "0.0         0.356737  709393.679753      108.308847   \n",
              "1.0         1.000000  377663.200000      114.400000   \n",
              "\n",
              "            subject_with_personalization  subject_with_deadline  \\\n",
              "is_blocked                                                        \n",
              "0.0                             0.001063               0.007418   \n",
              "1.0                             0.000000               0.000000   \n",
              "\n",
              "            subject_with_discount  \n",
              "is_blocked                         \n",
              "0.0                      0.001063  \n",
              "1.0                      0.000000  "
            ]
          },
          "execution_count": 30,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df.groupby(\"is_blocked\")[var].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "126e2e9b",
      "metadata": {
        "id": "126e2e9b"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1efebba7",
      "metadata": {
        "id": "1efebba7",
        "outputId": "b1257e95-f142-4f70-8ad0-25547c5b24a2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of instances where is_clicked=1 and is_opened=1: 14121\n",
            "Number of instances where is_clicked=1 but is_opened is not 1: 0\n"
          ]
        }
      ],
      "source": [
        "clicked_data = df[df['is_clicked'] == 1]\n",
        "\n",
        "uncorresponding_data = clicked_data[clicked_data['is_opened'] != 1]\n",
        "\n",
        "# Count the corresponding and non-corresponding instances\n",
        "corresponding_count = len(clicked_data) - len(uncorresponding_data)\n",
        "non_corresponding_count = len(uncorresponding_data)\n",
        "\n",
        "print(\"Number of instances where is_clicked=1 and is_opened=1:\", corresponding_count)\n",
        "print(\"Number of instances where is_clicked=1 but is_opened is not 1:\", non_corresponding_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b2106eb3",
      "metadata": {
        "id": "b2106eb3",
        "outputId": "d64234cf-33a0-40d0-a009-b087f30d2163"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of instances where is_unsubscribed=1 and is_opened=1: 1019\n",
            "Number of instances where is_unsubscribed=1 but is_opened is not 1: 55477\n"
          ]
        }
      ],
      "source": [
        "unsubscribed_data = df[df['is_unsubscribed'] == 1]\n",
        "\n",
        "# Then filter out data where is_opened is not 1\n",
        "uncorresponding_data = unsubscribed_data[unsubscribed_data['is_opened'] != 1]\n",
        "\n",
        "# Count the corresponding and non-corresponding instances\n",
        "corresponding_count = len(unsubscribed_data) - len(uncorresponding_data)\n",
        "non_corresponding_count = len(uncorresponding_data)\n",
        "\n",
        "print(\"Number of instances where is_unsubscribed=1 and is_opened=1:\", corresponding_count)\n",
        "print(\"Number of instances where is_unsubscribed=1 but is_opened is not 1:\", non_corresponding_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "71a99a3c",
      "metadata": {
        "id": "71a99a3c",
        "outputId": "0e47b86e-0975-494e-cd19-cb75fa8dfea3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of instances where is_complained=1 and is_opened=1: 113\n",
            "Number of instances where is_complained=1 but is_opened is not 1: 249\n"
          ]
        }
      ],
      "source": [
        "complained_data = df[df['is_complained'] == 1]\n",
        "\n",
        "# Then filter out data where is_opened is not 1\n",
        "uncorresponding_data = complained_data[complained_data['is_opened'] != 1]\n",
        "\n",
        "# Count the corresponding and non-corresponding instances\n",
        "corresponding_count = len(complained_data) - len(uncorresponding_data)\n",
        "non_corresponding_count = len(uncorresponding_data)\n",
        "\n",
        "print(\"Number of instances where is_complained=1 and is_opened=1:\", corresponding_count)\n",
        "print(\"Number of instances where is_complained=1 but is_opened is not 1:\", non_corresponding_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "4746b188",
      "metadata": {
        "id": "4746b188",
        "outputId": "4bb08a5d-d67e-4be6-d221-e4eafca4c292"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of instances where is_blocked=1 and is_opened=1: 1\n",
            "Number of instances where is_blocked=1 but is_opened is not 1: 4\n"
          ]
        }
      ],
      "source": [
        "blocked_data = df[df['is_blocked'] == 1]\n",
        "\n",
        "# Then filter out data where is_opened is not 1\n",
        "uncorresponding_data = blocked_data[blocked_data['is_opened'] != 1]\n",
        "\n",
        "# Count the corresponding and non-corresponding instances\n",
        "corresponding_count = len(blocked_data) - len(uncorresponding_data)\n",
        "non_corresponding_count = len(uncorresponding_data)\n",
        "\n",
        "print(\"Number of instances where is_blocked=1 and is_opened=1:\", corresponding_count)\n",
        "print(\"Number of instances where is_blocked=1 but is_opened is not 1:\", non_corresponding_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "8e94dbd5",
      "metadata": {
        "id": "8e94dbd5",
        "outputId": "07253be6-42c7-471a-aeeb-b9a0321912e6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of instances where is_purchased=1 and is_opened=1: 792\n",
            "Number of instances where is_purchased=1 but is_opened is not 1: 0\n"
          ]
        }
      ],
      "source": [
        "purchased_data = df[df['is_purchased'] == 1]\n",
        "\n",
        "# Then filter out data where is_opened is not 1\n",
        "uncorresponding_data = purchased_data[purchased_data['is_opened'] != 1]\n",
        "\n",
        "# Count the corresponding and non-corresponding instances\n",
        "corresponding_count = len(purchased_data) - len(uncorresponding_data)\n",
        "non_corresponding_count = len(uncorresponding_data)\n",
        "\n",
        "print(\"Number of instances where is_purchased=1 and is_opened=1:\", corresponding_count)\n",
        "print(\"Number of instances where is_purchased=1 but is_opened is not 1:\", non_corresponding_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5da7dce0",
      "metadata": {
        "id": "5da7dce0",
        "outputId": "a47e4341-e2fb-466d-c965-982976d09c01"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Number of instances where is_purchased=1 and is_clicked=1: 792\n",
            "Number of instances where is_purchased=1 but is_clicked is not 1: 0\n"
          ]
        }
      ],
      "source": [
        "purchased_data = df[df['is_purchased'] == 1]\n",
        "\n",
        "# Then filter out data where is_opened is not 1\n",
        "uncorresponding_data = purchased_data[purchased_data['is_clicked'] != 1]\n",
        "\n",
        "# Count the corresponding and non-corresponding instances\n",
        "corresponding_count = len(purchased_data) - len(uncorresponding_data)\n",
        "non_corresponding_count = len(uncorresponding_data)\n",
        "\n",
        "print(\"Number of instances where is_purchased=1 and is_clicked=1:\", corresponding_count)\n",
        "print(\"Number of instances where is_purchased=1 but is_clicked is not 1:\", non_corresponding_count)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "2681eacb",
      "metadata": {
        "id": "2681eacb"
      },
      "outputs": [],
      "source": [
        "## 加上图像部分"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "89ad24e0",
      "metadata": {
        "id": "89ad24e0"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "c0ef3c89",
      "metadata": {
        "id": "c0ef3c89"
      },
      "source": [
        "### This part is related to the Segmentation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "18b4774e",
      "metadata": {
        "id": "18b4774e"
      },
      "outputs": [],
      "source": [
        "## 解释加上IV DV关系\n",
        "## segmentation直接按照is_email分"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "ecdc3ff7",
      "metadata": {
        "id": "ecdc3ff7",
        "outputId": "0d14394d-9c65-498e-a1f6-80b99e2ccc4b"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "import matplotlib.pyplot as plt\n",
        "df_vis = df.drop(['id','campaign_id'],axis=1)\n",
        "\n",
        "f = plt.figure(figsize=(8, 6))\n",
        "plt.matshow(df_vis.corr(), fignum=f.number)\n",
        "plt.xticks(range(df_vis.shape[1]), df_vis.columns, fontsize=10, rotation=45)\n",
        "plt.yticks(range(df_vis.shape[1]), df_vis.columns, fontsize=10)\n",
        "cb = plt.colorbar()\n",
        "cb.ax.tick_params(labelsize=12)\n",
        "plt.title('Correlation Matrix', fontsize=12);\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "31b8691c",
      "metadata": {
        "id": "31b8691c"
      },
      "outputs": [],
      "source": [
        "from scipy.spatial import distance\n",
        "from scipy.spatial.distance import pdist\n",
        "from scipy.cluster.hierarchy import linkage, dendrogram\n",
        "\n",
        "from sklearn import metrics\n",
        "from sklearn.cluster import KMeans"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1d2a2bab",
      "metadata": {
        "id": "1d2a2bab",
        "outputId": "e77a6bb1-a479-4b0f-ab76-4e57d4031d51"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "      <td>1.220393e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-6.518004e-18</td>\n",
              "      <td>6.779422e-17</td>\n",
              "      <td>-2.934412e-18</td>\n",
              "      <td>1.191814e-17</td>\n",
              "      <td>-1.537073e-18</td>\n",
              "      <td>1.191814e-17</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "      <td>1.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-7.447006e-01</td>\n",
              "      <td>-1.981478e+00</td>\n",
              "      <td>-3.739353e+00</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "      <td>-8.644961e-02</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>-7.447006e-01</td>\n",
              "      <td>-1.190830e+00</td>\n",
              "      <td>-5.541670e-01</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "      <td>-8.644961e-02</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>-7.447006e-01</td>\n",
              "      <td>2.010045e-01</td>\n",
              "      <td>-5.541670e-01</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "      <td>-8.644961e-02</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>1.342821e+00</td>\n",
              "      <td>9.160204e-01</td>\n",
              "      <td>3.278844e-01</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "      <td>-8.644961e-02</td>\n",
              "      <td>-3.261751e-02</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>1.342821e+00</td>\n",
              "      <td>9.380310e-01</td>\n",
              "      <td>3.758084e+00</td>\n",
              "      <td>3.065835e+01</td>\n",
              "      <td>1.156742e+01</td>\n",
              "      <td>3.065835e+01</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "           is_email   total_count  subject_length  \\\n",
              "count  1.220393e+06  1.220393e+06    1.220393e+06   \n",
              "mean  -6.518004e-18  6.779422e-17   -2.934412e-18   \n",
              "std    1.000000e+00  1.000000e+00    1.000000e+00   \n",
              "min   -7.447006e-01 -1.981478e+00   -3.739353e+00   \n",
              "25%   -7.447006e-01 -1.190830e+00   -5.541670e-01   \n",
              "50%   -7.447006e-01  2.010045e-01   -5.541670e-01   \n",
              "75%    1.342821e+00  9.160204e-01    3.278844e-01   \n",
              "max    1.342821e+00  9.380310e-01    3.758084e+00   \n",
              "\n",
              "       subject_with_personalization  subject_with_deadline  \\\n",
              "count                  1.220393e+06           1.220393e+06   \n",
              "mean                   1.191814e-17          -1.537073e-18   \n",
              "std                    1.000000e+00           1.000000e+00   \n",
              "min                   -3.261751e-02          -8.644961e-02   \n",
              "25%                   -3.261751e-02          -8.644961e-02   \n",
              "50%                   -3.261751e-02          -8.644961e-02   \n",
              "75%                   -3.261751e-02          -8.644961e-02   \n",
              "max                    3.065835e+01           1.156742e+01   \n",
              "\n",
              "       subject_with_discount  \n",
              "count           1.220393e+06  \n",
              "mean            1.191814e-17  \n",
              "std             1.000000e+00  \n",
              "min            -3.261751e-02  \n",
              "25%            -3.261751e-02  \n",
              "50%            -3.261751e-02  \n",
              "75%            -3.261751e-02  \n",
              "max             3.065835e+01  "
            ]
          },
          "execution_count": 74,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## data/IVs normalization\n",
        "#df_nor = df[['subject_with_personalization','subject_with_deadline', 'subject_with_discount']]\n",
        "df_nor = df[['is_email','total_count', 'subject_length', 'subject_with_personalization','subject_with_deadline', 'subject_with_discount']]\n",
        "df_nor = (df_nor-df_nor.mean()) /df_nor.std()\n",
        "df_nor = df_nor.astype(float)\n",
        "  df_nor.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "e616aae0",
      "metadata": {
        "id": "e616aae0",
        "outputId": "0e2cdd38-534c-41d5-f29b-fa115fe47fa9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.190830</td>\n",
              "      <td>0.180876</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>-1.721147</td>\n",
              "      <td>-3.739353</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.486073</td>\n",
              "      <td>1.209936</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.938031</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>-1.721147</td>\n",
              "      <td>-3.739353</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220388</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.190830</td>\n",
              "      <td>0.180876</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220389</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.916020</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220390</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.938031</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220391</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.593407</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220392</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.916020</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1220393 rows × 6 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         is_email  total_count  subject_length  subject_with_personalization  \\\n",
              "0        1.342821    -1.190830        0.180876                     -0.032618   \n",
              "1       -0.744701    -1.721147       -3.739353                     -0.032618   \n",
              "2        1.342821    -1.486073        1.209936                     -0.032618   \n",
              "3       -0.744701     0.938031       -0.554167                     -0.032618   \n",
              "4       -0.744701    -1.721147       -3.739353                     -0.032618   \n",
              "...           ...          ...             ...                           ...   \n",
              "1220388  1.342821    -1.190830        0.180876                     -0.032618   \n",
              "1220389 -0.744701     0.916020       -0.554167                     -0.032618   \n",
              "1220390 -0.744701     0.938031       -0.554167                     -0.032618   \n",
              "1220391 -0.744701     0.593407       -0.554167                     -0.032618   \n",
              "1220392 -0.744701     0.916020       -0.554167                     -0.032618   \n",
              "\n",
              "         subject_with_deadline  subject_with_discount  \n",
              "0                     -0.08645              -0.032618  \n",
              "1                     -0.08645              -0.032618  \n",
              "2                     -0.08645              -0.032618  \n",
              "3                     -0.08645              -0.032618  \n",
              "4                     -0.08645              -0.032618  \n",
              "...                        ...                    ...  \n",
              "1220388               -0.08645              -0.032618  \n",
              "1220389               -0.08645              -0.032618  \n",
              "1220390               -0.08645              -0.032618  \n",
              "1220391               -0.08645              -0.032618  \n",
              "1220392               -0.08645              -0.032618  \n",
              "\n",
              "[1220393 rows x 6 columns]"
            ]
          },
          "execution_count": 75,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f90ff6e8",
      "metadata": {
        "id": "f90ff6e8"
      },
      "outputs": [],
      "source": [
        "#seg_var_name = df_nor.columns\n",
        "seg_var_name = ['subject_with_personalization','subject_with_deadline', 'subject_with_discount']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "a1c7897f",
      "metadata": {
        "id": "a1c7897f",
        "outputId": "9dc3590c-1442-43f8-e88a-2742b513cd5b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Distance between camapigns')"
            ]
          },
          "execution_count": 77,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "df_nor = df_nor.sample(frac=0.01, random_state=123)\n",
        "## Report will explain why randomly select 1% from the dataframe\n",
        "\n",
        "dist_euclidean = metrics.pairwise.euclidean_distances(df_nor[seg_var_name])\n",
        "dist_vec = dist_euclidean.flatten() # to change the matrix to a vector for visualization\n",
        "plt.hist(dist_vec,\n",
        "         color='red',\n",
        "         bins=50,\n",
        "         edgecolor='blue'\n",
        "        );\n",
        "plt.title(\"Histogram of all pairwise Distances between observations\")\n",
        "plt.xlabel(\"Distance between camapigns\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "17503e9c",
      "metadata": {
        "id": "17503e9c"
      },
      "outputs": [],
      "source": [
        "df_nor[seg_var_name] = df_nor[seg_var_name].astype(float)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "289b8541",
      "metadata": {
        "id": "289b8541",
        "outputId": "95f1dd15-12f7-4d31-81c0-a056e36dff8e"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Distance')"
            ]
          },
          "execution_count": 79,
          "metadata": {},
          "output_type": "execute_result"
        },
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# This function gets pairwise distances between observations in n-dimensional space.\n",
        "dists = pdist(df_nor[seg_var_name], metric=\"euclidean\")\n",
        "\n",
        "# This scipy's function performs hierarchical clustering on the condensed distance matrix y.\n",
        "links = linkage(dists, method='average')\n",
        "\n",
        "last = links[-10:, 2]\n",
        "last_rev = last[::-1]\n",
        "\n",
        "plt.plot(range(1, len(last_rev)+1), last_rev, \"bo-\")\n",
        "plt.title(\"Scree plot\")\n",
        "plt.xlabel(\"Number of clusters\")\n",
        "plt.ylabel(\"Distance\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "50b3bdc7",
      "metadata": {
        "id": "50b3bdc7",
        "outputId": "53349a67-ec0f-40e9-d27a-0d6db948f80e"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_kmeans.py:1412: FutureWarning: The default value of `n_init` will change from 10 to 'auto' in 1.4. Set the value of `n_init` explicitly to suppress the warning\n",
            "  super()._check_params_vs_input(X, default_n_init=10)\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([1, 1, 1, ..., 1, 1, 1])"
            ]
          },
          "execution_count": 80,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "k_clusters = 3\n",
        "model = KMeans(k_clusters)\n",
        "model.fit(df_nor[seg_var_name])\n",
        "cluster_km = model.predict(df_nor[seg_var_name])\n",
        "cluster_km"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "12ccb03a",
      "metadata": {
        "id": "12ccb03a",
        "outputId": "a912d7a1-444b-4df8-d5ae-beb30d851e85"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "      <th>cluster_id</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cluster_id</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.963685</td>\n",
              "      <td>3.758084</td>\n",
              "      <td>30.658351</td>\n",
              "      <td>-0.086450</td>\n",
              "      <td>30.658351</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.006347</td>\n",
              "      <td>0.013662</td>\n",
              "      <td>-0.011430</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.086450</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>1.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>-1.854387</td>\n",
              "      <td>0.033867</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>11.567422</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>2.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            is_email  total_count  subject_length  \\\n",
              "cluster_id                                          \n",
              "0           1.342821    -1.963685        3.758084   \n",
              "1          -0.006347     0.013662       -0.011430   \n",
              "2          -0.744701    -1.854387        0.033867   \n",
              "\n",
              "            subject_with_personalization  subject_with_deadline  \\\n",
              "cluster_id                                                        \n",
              "0                              30.658351              -0.086450   \n",
              "1                              -0.032618              -0.086450   \n",
              "2                              -0.032618              11.567422   \n",
              "\n",
              "            subject_with_discount  cluster_id  \n",
              "cluster_id                                     \n",
              "0                       30.658351         0.0  \n",
              "1                       -0.032618         1.0  \n",
              "2                       -0.032618         2.0  "
            ]
          },
          "execution_count": 81,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nor[\"cluster_id\"] = cluster_km\n",
        "df_nor.groupby(\"cluster_id\")[df_nor.columns[:]].mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "fe7f4ebb",
      "metadata": {
        "id": "fe7f4ebb",
        "outputId": "39accd8a-6fa0-4978-befd-7740b0ffc612"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "df_cluster = df_nor.groupby(\"cluster_id\")[df_nor.columns[:-1]].mean().reindex()\n",
        "df_cluster.plot.barh()\n",
        "plt.yticks([0, 1, 2], [\"Cluster 1\",\"Cluster 2\",\"Cluster 3\"])\n",
        "plt.xlim([-3,5])\n",
        "plt.legend(loc=4)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0c626087",
      "metadata": {
        "id": "0c626087",
        "outputId": "8f18fd96-c9b5-4d4d-9f58-3e50532303ee"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\sklearn\\cluster\\_agglomerative.py:1005: FutureWarning: Attribute `affinity` was deprecated in version 1.2 and will be removed in 1.4. Use `metric` instead\n",
            "  warnings.warn(\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "array([2, 2, 2, ..., 2, 2, 2], dtype=int64)"
            ]
          },
          "execution_count": 83,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.cluster import AgglomerativeClustering\n",
        "cluster = AgglomerativeClustering(n_clusters=3, affinity='euclidean', linkage='average')\n",
        "cluster_hc = cluster.fit_predict(df_nor[seg_var_name])\n",
        "cluster_hc"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "38b7c657",
      "metadata": {
        "id": "38b7c657",
        "outputId": "29a64ee7-9685-45ff-8f94-070340d2d61d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>12194</th>\n",
              "      <th>12195</th>\n",
              "      <th>12196</th>\n",
              "      <th>12197</th>\n",
              "      <th>12198</th>\n",
              "      <th>12199</th>\n",
              "      <th>12200</th>\n",
              "      <th>12201</th>\n",
              "      <th>12202</th>\n",
              "      <th>12203</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Cluster_hc</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Cluster_km</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2 rows × 12204 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            0      1      2      3      4      5      6      7      8      \\\n",
              "Cluster_hc      2      2      2      2      2      2      2      2      2   \n",
              "Cluster_km      1      1      1      1      1      1      1      1      1   \n",
              "\n",
              "            9      ...  12194  12195  12196  12197  12198  12199  12200  \\\n",
              "Cluster_hc      2  ...      2      2      2      2      2      2      2   \n",
              "Cluster_km      1  ...      1      1      1      1      1      1      1   \n",
              "\n",
              "            12201  12202  12203  \n",
              "Cluster_hc      2      2      2  \n",
              "Cluster_km      1      1      1  \n",
              "\n",
              "[2 rows x 12204 columns]"
            ]
          },
          "execution_count": 84,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "c = pd.DataFrame()\n",
        "c[\"Cluster_hc\"] = cluster_hc ## Hierarchical Clustering\n",
        "c[\"Cluster_km\"] = cluster_km ## K-means\n",
        "c[[\"Cluster_hc\", \"Cluster_km\"]].transpose()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "be936392",
      "metadata": {
        "id": "be936392",
        "outputId": "01925542-5436-4daa-a0af-d6a5dae8e9ba"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[0.0, 0.0, 1.0]\n",
            "[1.0, 0.0, 0.0]\n",
            "[0.0, 1.0, 0.0]\n",
            "[1.0, 1.0, 1.0]\n"
          ]
        }
      ],
      "source": [
        "# calculate the matches for two segmentation results\n",
        "match_percentage = []\n",
        "\n",
        "# for each of the cluster in HC result\n",
        "for i in [0, 1, 2]:\n",
        "\n",
        "    # obtain the cluster membership in KMeans\n",
        "    ml = c.loc[c[\"Cluster_hc\"] == i, \"Cluster_km\"].to_list()\n",
        "\n",
        "    # percentage of members in each of the clusters output by KMeans\n",
        "    freq = [ml.count(0)/len(ml), ml.count(1)/len(ml), ml.count(2)/len(ml)]\n",
        "    print(freq)\n",
        "\n",
        "    # use the majority of KMeans member as the percentage of match\n",
        "    match_percentage.append(max(freq))\n",
        "\n",
        "print(match_percentage)\n",
        "# since we have a exact match case, we see 100% for each of the cluster\n",
        "# if you need to an over comparison between cluster, you can simple take an average for the three clusters."
      ]
    },
    {
      "cell_type": "markdown",
      "id": "2ebb1f62",
      "metadata": {
        "id": "2ebb1f62"
      },
      "source": [
        "The results of two different methods: K-means & cluster are robust"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "eeb9f1bb",
      "metadata": {
        "id": "eeb9f1bb"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cefce31c",
      "metadata": {
        "id": "cefce31c",
        "outputId": "38de0c4d-1c29-4f31-b94b-8acbf7331aec"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "is_email\n",
              "0.0    785031\n",
              "1.0    435362\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nor1 = df[['is_email','total_count', 'subject_length', 'subject_with_personalization','subject_with_deadline', 'subject_with_discount']]\n",
        "df_nor1['is_email'].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "da5eb731",
      "metadata": {
        "id": "da5eb731",
        "outputId": "96efac3e-8464-4f6d-a813-affdbe97f0a2"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_email</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0.0</th>\n",
              "      <td>791069.834254</td>\n",
              "      <td>100.721475</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.011532</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1.0</th>\n",
              "      <td>562114.009282</td>\n",
              "      <td>121.990227</td>\n",
              "      <td>0.002979</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.002979</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "            total_count  subject_length  subject_with_personalization  \\\n",
              "is_email                                                                \n",
              "0.0       791069.834254      100.721475                      0.000000   \n",
              "1.0       562114.009282      121.990227                      0.002979   \n",
              "\n",
              "          subject_with_deadline  subject_with_discount  \n",
              "is_email                                                \n",
              "0.0                    0.011532               0.000000  \n",
              "1.0                    0.000000               0.002979  "
            ]
          },
          "execution_count": 89,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_nor1.groupby('is_email').mean()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "67d99297",
      "metadata": {
        "id": "67d99297"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "5901d194",
      "metadata": {
        "id": "5901d194"
      },
      "source": [
        "### Next part is related to the logistic regression. We want to know which factor can significantly influence the behavior of users."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "1e29595b",
      "metadata": {
        "id": "1e29595b",
        "outputId": "ea82f548-bc91-494b-f74b-7ff6a6718812"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>is_email</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>57733927.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>59297456.0</td>\n",
              "      <td>231.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>57456878.0</td>\n",
              "      <td>136.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>177363.0</td>\n",
              "      <td>133.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>56236991.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>59485472.0</td>\n",
              "      <td>231.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>93204.0</td>\n",
              "      <td>32.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220388</th>\n",
              "      <td>57635236.0</td>\n",
              "      <td>143.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>283063.0</td>\n",
              "      <td>112.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220389</th>\n",
              "      <td>54232366.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220390</th>\n",
              "      <td>56711956.0</td>\n",
              "      <td>111.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1045217.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220391</th>\n",
              "      <td>55098587.0</td>\n",
              "      <td>79.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>921838.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220392</th>\n",
              "      <td>54999679.0</td>\n",
              "      <td>64.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1037337.0</td>\n",
              "      <td>97.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1220393 rows × 14 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "                 id  campaign_id  is_email  is_opened  is_clicked  \\\n",
              "0        57733927.0        143.0       1.0        0.0         0.0   \n",
              "1        59297456.0        231.0       0.0        0.0         0.0   \n",
              "2        57456878.0        136.0       1.0        0.0         0.0   \n",
              "3        56236991.0        111.0       0.0        0.0         0.0   \n",
              "4        59485472.0        231.0       0.0        0.0         0.0   \n",
              "...             ...          ...       ...        ...         ...   \n",
              "1220388  57635236.0        143.0       1.0        0.0         0.0   \n",
              "1220389  54232366.0         64.0       0.0        0.0         0.0   \n",
              "1220390  56711956.0        111.0       0.0        0.0         0.0   \n",
              "1220391  55098587.0         79.0       0.0        0.0         0.0   \n",
              "1220392  54999679.0         64.0       0.0        0.0         0.0   \n",
              "\n",
              "         is_unsubscribed  is_complained  is_blocked  is_purchased  \\\n",
              "0                    0.0            0.0         0.0           0.0   \n",
              "1                    0.0            0.0         0.0           0.0   \n",
              "2                    0.0            0.0         0.0           0.0   \n",
              "3                    0.0            0.0         0.0           0.0   \n",
              "4                    0.0            0.0         0.0           0.0   \n",
              "...                  ...            ...         ...           ...   \n",
              "1220388              0.0            0.0         0.0           0.0   \n",
              "1220389              0.0            0.0         0.0           0.0   \n",
              "1220390              0.0            0.0         0.0           0.0   \n",
              "1220391              0.0            0.0         0.0           0.0   \n",
              "1220392              0.0            0.0         0.0           0.0   \n",
              "\n",
              "         total_count  subject_length  subject_with_personalization  \\\n",
              "0           283063.0           112.0                           0.0   \n",
              "1            93204.0            32.0                           0.0   \n",
              "2           177363.0           133.0                           0.0   \n",
              "3          1045217.0            97.0                           0.0   \n",
              "4            93204.0            32.0                           0.0   \n",
              "...              ...             ...                           ...   \n",
              "1220388     283063.0           112.0                           0.0   \n",
              "1220389    1037337.0            97.0                           0.0   \n",
              "1220390    1045217.0            97.0                           0.0   \n",
              "1220391     921838.0            97.0                           0.0   \n",
              "1220392    1037337.0            97.0                           0.0   \n",
              "\n",
              "         subject_with_deadline  subject_with_discount  \n",
              "0                          0.0                    0.0  \n",
              "1                          0.0                    0.0  \n",
              "2                          0.0                    0.0  \n",
              "3                          0.0                    0.0  \n",
              "4                          0.0                    0.0  \n",
              "...                        ...                    ...  \n",
              "1220388                    0.0                    0.0  \n",
              "1220389                    0.0                    0.0  \n",
              "1220390                    0.0                    0.0  \n",
              "1220391                    0.0                    0.0  \n",
              "1220392                    0.0                    0.0  \n",
              "\n",
              "[1220393 rows x 14 columns]"
            ]
          },
          "execution_count": 105,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b024d760",
      "metadata": {
        "id": "b024d760"
      },
      "outputs": [],
      "source": [
        "df = df.astype(float)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d489aaee",
      "metadata": {
        "id": "d489aaee",
        "outputId": "f766cab3-8105-4c70-c22c-e400a275843c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "",
            "text/plain": [
              "<Figure size 800x600 with 2 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "f = plt.figure(figsize=(8, 6))\n",
        "plt.matshow(df.corr(), fignum=f.number)\n",
        "plt.xticks(range(df.shape[1]), df.columns, fontsize=10, rotation=45)\n",
        "plt.yticks(range(df.shape[1]), df.columns, fontsize=10)\n",
        "cb = plt.colorbar()\n",
        "cb.ax.tick_params(labelsize=12)\n",
        "plt.title('Correlation Matrix', fontsize=12);\n",
        "\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "517992be",
      "metadata": {
        "id": "517992be"
      },
      "source": [
        "There are highly-correlated factors which will result in multicolinarity in regression analysis. So we deduct \"subject_with_discount\" which is highly correlated with \"subject_with_personalization\" during the logistic regression"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f70b02eb",
      "metadata": {
        "id": "f70b02eb"
      },
      "outputs": [],
      "source": [
        "from sklearn.linear_model import LogisticRegression\n",
        "import statsmodels.formula.api as smf"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "afb9c6be",
      "metadata": {
        "id": "afb9c6be",
        "outputId": "bf24943b-91b8-4aaf-ac8b-1a8661bb4c2c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.400384\n",
            "         Iterations 6\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:              is_opened   No. Observations:              1220393\n",
            "Model:                          Logit   Df Residuals:                  1220388\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                 0.01283\n",
            "Time:                        21:24:24   Log-Likelihood:            -4.8863e+05\n",
            "converged:                       True   LL-Null:                   -4.9497e+05\n",
            "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                       -3.2245      0.015   -209.049      0.000      -3.255      -3.194\n",
            "subject_length                   0.0122      0.000     85.105      0.000       0.012       0.013\n",
            "is_email                         0.1560      0.006     26.367      0.000       0.144       0.168\n",
            "subject_with_personalization     0.1030      0.060      1.721      0.085      -0.014       0.220\n",
            "subject_with_deadline            0.2363      0.029      8.187      0.000       0.180       0.293\n",
            "================================================================================================\n"
          ]
        }
      ],
      "source": [
        "## The effect size of \"total_count\" is small, and the factor is meaningless in the real world since receiver has no idea about the total_count --> deduct this IV\n",
        "result_open=smf.logit(formula=\"is_opened ~  subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df).fit()\n",
        "print(result_open.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "96cfa188",
      "metadata": {
        "id": "96cfa188",
        "outputId": "88ecea01-b443-4b4f-9f4f-258b60628bad"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.222854\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:             is_clicked   No. Observations:               171274\n",
            "Model:                          Logit   Df Residuals:                   171269\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                  0.2172\n",
            "Time:                        21:26:53   Log-Likelihood:                -38169.\n",
            "converged:                      False   LL-Null:                       -48763.\n",
            "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                       -9.0473      0.115    -78.714      0.000      -9.273      -8.822\n",
            "subject_length                   0.0358      0.001     40.632      0.000       0.034       0.038\n",
            "is_email                         3.0050      0.042     71.020      0.000       2.922       3.088\n",
            "subject_with_personalization    -2.1123      0.136    -15.476      0.000      -2.380      -1.845\n",
            "subject_with_deadline          -11.5545    111.164     -0.104      0.917    -229.431     206.322\n",
            "================================================================================================\n"
          ]
        }
      ],
      "source": [
        "## Check the influence on \"is_clicked\" in the sample of all the opened message\n",
        "result_click=smf.logit(formula=\"is_clicked ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df[df.is_opened==1]).fit()\n",
        "print(result_click.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "422f6144",
      "metadata": {
        "id": "422f6144",
        "outputId": "4c244c83-9b2c-4bdb-f308-4aae561bc1c5"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "is_purchased\n",
              "0.0    13779\n",
              "1.0      342\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 115,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_click = df[df.is_clicked==1]\n",
        "df_click.is_purchased.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "6917d1de",
      "metadata": {
        "id": "6917d1de",
        "outputId": "45444002-b4f7-46a2-e7d8-9bd75a384389"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>campaign_id</th>\n",
              "      <th>is_email</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>id</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.766746</td>\n",
              "      <td>-0.337824</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.005525</td>\n",
              "      <td>-0.020748</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.036325</td>\n",
              "      <td>-0.261986</td>\n",
              "      <td>-0.215354</td>\n",
              "      <td>0.093494</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.093494</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>campaign_id</th>\n",
              "      <td>0.766746</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.460523</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.007827</td>\n",
              "      <td>-0.009767</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.022932</td>\n",
              "      <td>-0.309402</td>\n",
              "      <td>-0.211285</td>\n",
              "      <td>0.113834</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.113834</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_email</th>\n",
              "      <td>-0.337824</td>\n",
              "      <td>-0.460523</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.012106</td>\n",
              "      <td>0.005348</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.033360</td>\n",
              "      <td>0.563821</td>\n",
              "      <td>0.357788</td>\n",
              "      <td>0.015577</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.015577</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_opened</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_clicked</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <td>-0.005525</td>\n",
              "      <td>-0.007827</td>\n",
              "      <td>0.012106</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.047800</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.000922</td>\n",
              "      <td>0.002770</td>\n",
              "      <td>-0.000964</td>\n",
              "      <td>-0.004205</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.004205</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_complained</th>\n",
              "      <td>-0.020748</td>\n",
              "      <td>-0.009767</td>\n",
              "      <td>0.005348</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.047800</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.003979</td>\n",
              "      <td>-0.000556</td>\n",
              "      <td>0.000204</td>\n",
              "      <td>-0.001858</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.001858</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_blocked</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>is_purchased</th>\n",
              "      <td>-0.036325</td>\n",
              "      <td>-0.022932</td>\n",
              "      <td>0.033360</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.000922</td>\n",
              "      <td>-0.003979</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.015839</td>\n",
              "      <td>-0.003711</td>\n",
              "      <td>0.001003</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.001003</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>total_count</th>\n",
              "      <td>-0.261986</td>\n",
              "      <td>-0.309402</td>\n",
              "      <td>0.563821</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.002770</td>\n",
              "      <td>-0.000556</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.015839</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.537794</td>\n",
              "      <td>-0.230022</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.230022</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_length</th>\n",
              "      <td>-0.215354</td>\n",
              "      <td>-0.211285</td>\n",
              "      <td>0.357788</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.000964</td>\n",
              "      <td>0.000204</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.003711</td>\n",
              "      <td>0.537794</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.293472</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.293472</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <td>0.093494</td>\n",
              "      <td>0.113834</td>\n",
              "      <td>0.015577</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.004205</td>\n",
              "      <td>-0.001858</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.001003</td>\n",
              "      <td>-0.230022</td>\n",
              "      <td>0.293472</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>subject_with_discount</th>\n",
              "      <td>0.093494</td>\n",
              "      <td>0.113834</td>\n",
              "      <td>0.015577</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>-0.004205</td>\n",
              "      <td>-0.001858</td>\n",
              "      <td>NaN</td>\n",
              "      <td>0.001003</td>\n",
              "      <td>-0.230022</td>\n",
              "      <td>0.293472</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>NaN</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "                                    id  campaign_id  is_email  is_opened  \\\n",
              "id                            1.000000     0.766746 -0.337824        NaN   \n",
              "campaign_id                   0.766746     1.000000 -0.460523        NaN   \n",
              "is_email                     -0.337824    -0.460523  1.000000        NaN   \n",
              "is_opened                          NaN          NaN       NaN        NaN   \n",
              "is_clicked                         NaN          NaN       NaN        NaN   \n",
              "is_unsubscribed              -0.005525    -0.007827  0.012106        NaN   \n",
              "is_complained                -0.020748    -0.009767  0.005348        NaN   \n",
              "is_blocked                         NaN          NaN       NaN        NaN   \n",
              "is_purchased                 -0.036325    -0.022932  0.033360        NaN   \n",
              "total_count                  -0.261986    -0.309402  0.563821        NaN   \n",
              "subject_length               -0.215354    -0.211285  0.357788        NaN   \n",
              "subject_with_personalization  0.093494     0.113834  0.015577        NaN   \n",
              "subject_with_deadline              NaN          NaN       NaN        NaN   \n",
              "subject_with_discount         0.093494     0.113834  0.015577        NaN   \n",
              "\n",
              "                              is_clicked  is_unsubscribed  is_complained  \\\n",
              "id                                   NaN        -0.005525      -0.020748   \n",
              "campaign_id                          NaN        -0.007827      -0.009767   \n",
              "is_email                             NaN         0.012106       0.005348   \n",
              "is_opened                            NaN              NaN            NaN   \n",
              "is_clicked                           NaN              NaN            NaN   \n",
              "is_unsubscribed                      NaN         1.000000       0.047800   \n",
              "is_complained                        NaN         0.047800       1.000000   \n",
              "is_blocked                           NaN              NaN            NaN   \n",
              "is_purchased                         NaN        -0.000922      -0.003979   \n",
              "total_count                          NaN         0.002770      -0.000556   \n",
              "subject_length                       NaN        -0.000964       0.000204   \n",
              "subject_with_personalization         NaN        -0.004205      -0.001858   \n",
              "subject_with_deadline                NaN              NaN            NaN   \n",
              "subject_with_discount                NaN        -0.004205      -0.001858   \n",
              "\n",
              "                              is_blocked  is_purchased  total_count  \\\n",
              "id                                   NaN     -0.036325    -0.261986   \n",
              "campaign_id                          NaN     -0.022932    -0.309402   \n",
              "is_email                             NaN      0.033360     0.563821   \n",
              "is_opened                            NaN           NaN          NaN   \n",
              "is_clicked                           NaN           NaN          NaN   \n",
              "is_unsubscribed                      NaN     -0.000922     0.002770   \n",
              "is_complained                        NaN     -0.003979    -0.000556   \n",
              "is_blocked                           NaN           NaN          NaN   \n",
              "is_purchased                         NaN      1.000000    -0.015839   \n",
              "total_count                          NaN     -0.015839     1.000000   \n",
              "subject_length                       NaN     -0.003711     0.537794   \n",
              "subject_with_personalization         NaN      0.001003    -0.230022   \n",
              "subject_with_deadline                NaN           NaN          NaN   \n",
              "subject_with_discount                NaN      0.001003    -0.230022   \n",
              "\n",
              "                              subject_length  subject_with_personalization  \\\n",
              "id                                 -0.215354                      0.093494   \n",
              "campaign_id                        -0.211285                      0.113834   \n",
              "is_email                            0.357788                      0.015577   \n",
              "is_opened                                NaN                           NaN   \n",
              "is_clicked                               NaN                           NaN   \n",
              "is_unsubscribed                    -0.000964                     -0.004205   \n",
              "is_complained                       0.000204                     -0.001858   \n",
              "is_blocked                               NaN                           NaN   \n",
              "is_purchased                       -0.003711                      0.001003   \n",
              "total_count                         0.537794                     -0.230022   \n",
              "subject_length                      1.000000                      0.293472   \n",
              "subject_with_personalization        0.293472                      1.000000   \n",
              "subject_with_deadline                    NaN                           NaN   \n",
              "subject_with_discount               0.293472                      1.000000   \n",
              "\n",
              "                              subject_with_deadline  subject_with_discount  \n",
              "id                                              NaN               0.093494  \n",
              "campaign_id                                     NaN               0.113834  \n",
              "is_email                                        NaN               0.015577  \n",
              "is_opened                                       NaN                    NaN  \n",
              "is_clicked                                      NaN                    NaN  \n",
              "is_unsubscribed                                 NaN              -0.004205  \n",
              "is_complained                                   NaN              -0.001858  \n",
              "is_blocked                                      NaN                    NaN  \n",
              "is_purchased                                    NaN               0.001003  \n",
              "total_count                                     NaN              -0.230022  \n",
              "subject_length                                  NaN               0.293472  \n",
              "subject_with_personalization                    NaN               1.000000  \n",
              "subject_with_deadline                           NaN                    NaN  \n",
              "subject_with_discount                           NaN               1.000000  "
            ]
          },
          "execution_count": 119,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_click.astype(float).corr()"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "e20d313b",
      "metadata": {
        "id": "e20d313b"
      },
      "source": [
        "There is error reminds a perfect multicollinearity, so after checking the correlation between variables, we decided to remove \"subject_with_deadline\""
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "587db6f2",
      "metadata": {
        "id": "587db6f2",
        "outputId": "8325e9e8-3810-4425-ffee-0783dd42a8db"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.112624\n",
            "         Iterations: 35\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:           is_purchased   No. Observations:                14121\n",
            "Model:                          Logit   Df Residuals:                    14117\n",
            "Method:                           MLE   Df Model:                            3\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                 0.01237\n",
            "Time:                        22:10:36   Log-Likelihood:                -1590.4\n",
            "converged:                      False   LL-Null:                       -1610.3\n",
            "Covariance Type:            nonrobust   LLR p-value:                 1.159e-08\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -19.7527   1761.039     -0.011      0.991   -3471.325    3431.819\n",
            "subject_length                  -0.0187      0.006     -3.179      0.001      -0.030      -0.007\n",
            "is_email                        18.4983   1761.039      0.011      0.992   -3433.074    3470.070\n",
            "subject_with_personalization     1.0994      0.794      1.385      0.166      -0.457       2.655\n",
            "================================================================================================\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        }
      ],
      "source": [
        "result_purchase=smf.logit(formula=\"is_purchased ~ subject_length + is_email + subject_with_personalization\", data=df_click).fit()\n",
        "print(result_purchase.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "978a403d",
      "metadata": {
        "id": "978a403d"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "b753ce14",
      "metadata": {
        "id": "b753ce14",
        "outputId": "e7ab17ef-8d54-48f5-a526-41e7d9bc6fc1"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Optimization terminated successfully.\n",
            "         Current function value: 0.170830\n",
            "         Iterations 11\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:        is_unsubscribed   No. Observations:              1220393\n",
            "Model:                          Logit   Df Residuals:                  1220388\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                 0.08868\n",
            "Time:                        22:16:22   Log-Likelihood:            -2.0848e+05\n",
            "converged:                       True   LL-Null:                   -2.2877e+05\n",
            "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                       -2.0329      0.022    -91.324      0.000      -2.077      -1.989\n",
            "subject_length                  -0.0054      0.000    -24.600      0.000      -0.006      -0.005\n",
            "is_email                        -2.9767      0.027   -111.130      0.000      -3.029      -2.924\n",
            "subject_with_personalization    -1.1516      1.001     -1.151      0.250      -3.113       0.810\n",
            "subject_with_deadline           -2.1330      0.115    -18.619      0.000      -2.357      -1.908\n",
            "================================================================================================\n"
          ]
        }
      ],
      "source": [
        "## In the whole sample set (both is_opened=0 & is_opened=1)\n",
        "result_subscribe=smf.logit(formula=\"is_unsubscribed ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df).fit()\n",
        "print(result_subscribe.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "0c2dec4f",
      "metadata": {
        "id": "0c2dec4f",
        "outputId": "5d96ad3a-a007-4bd3-a5f2-7ae0c66275de"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.031182\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:        is_unsubscribed   No. Observations:               171274\n",
            "Model:                          Logit   Df Residuals:                   171269\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                  0.1438\n",
            "Time:                        22:16:39   Log-Likelihood:                -5340.7\n",
            "converged:                      False   LL-Null:                       -6237.8\n",
            "Covariance Type:            nonrobust   LLR p-value:                     0.000\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -25.8350   5633.374     -0.005      0.996   -1.11e+04     1.1e+04\n",
            "subject_length                  -0.0291      0.003     -9.772      0.000      -0.035      -0.023\n",
            "is_email                        25.1664   5633.374      0.004      0.996    -1.1e+04    1.11e+04\n",
            "subject_with_personalization    -0.0029      1.019     -0.003      0.998      -2.000       1.994\n",
            "subject_with_deadline            0.3295   4.47e+04   7.37e-06      1.000   -8.76e+04    8.76e+04\n",
            "================================================================================================\n",
            "\n",
            "Possibly complete quasi-separation: A fraction 0.56 of observations can be\n",
            "perfectly predicted. This might indicate that there is complete\n",
            "quasi-separation. In this case some parameters will not be identified.\n"
          ]
        }
      ],
      "source": [
        "## In the opened sample set (only is_opened=1)\n",
        "result_subscribe=smf.logit(formula=\"is_unsubscribed ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df[df.is_opened==1]).fit()\n",
        "print(result_subscribe.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "06319b80",
      "metadata": {
        "id": "06319b80",
        "outputId": "d2cda63e-cfd9-4a7e-f8c1-89aa2eabebd7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.021724\n",
            "         Iterations: 35\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:        is_unsubscribed   No. Observations:                14121\n",
            "Model:                          Logit   Df Residuals:                    14117\n",
            "Method:                           MLE   Df Model:                            3\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                0.008381\n",
            "Time:                        22:16:54   Log-Likelihood:                -306.76\n",
            "converged:                      False   LL-Null:                       -309.36\n",
            "Covariance Type:            nonrobust   LLR p-value:                    0.1587\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -14.0236     81.853     -0.171      0.864    -174.453     146.405\n",
            "subject_length                  -0.0132      0.016     -0.811      0.417      -0.045       0.019\n",
            "is_email                        10.0400     81.847      0.123      0.902    -150.378     170.458\n",
            "subject_with_personalization   -17.5632   1.85e+04     -0.001      0.999   -3.63e+04    3.62e+04\n",
            "================================================================================================\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        }
      ],
      "source": [
        "## In the clicked sample set (only is_clicked=1)\n",
        "result_subscribe=smf.logit(formula=\"is_unsubscribed ~ subject_length + is_email + subject_with_personalization\", data=df_click).fit()\n",
        "print(result_subscribe.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "667ce67a",
      "metadata": {
        "id": "667ce67a",
        "outputId": "1678a29b-bc37-4f57-8d9c-ea86ff0fd7cf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.002399\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:          is_complained   No. Observations:              1220393\n",
            "Model:                          Logit   Df Residuals:                  1220388\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                  0.1134\n",
            "Time:                        22:17:32   Log-Likelihood:                -2928.1\n",
            "converged:                      False   LL-Null:                       -3302.5\n",
            "Covariance Type:            nonrobust   LLR p-value:                9.316e-161\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -24.9378    262.070     -0.095      0.924    -538.586     488.711\n",
            "subject_length                   0.0024      0.005      0.455      0.649      -0.008       0.013\n",
            "is_email                        17.5616    262.070      0.067      0.947    -496.086     531.209\n",
            "subject_with_personalization   -11.2186    243.522     -0.046      0.963    -488.514     466.076\n",
            "subject_with_deadline           -0.3935   2938.282     -0.000      1.000   -5759.321    5758.534\n",
            "================================================================================================\n",
            "\n",
            "Possibly complete quasi-separation: A fraction 0.64 of observations can be\n",
            "perfectly predicted. This might indicate that there is complete\n",
            "quasi-separation. In this case some parameters will not be identified.\n"
          ]
        }
      ],
      "source": [
        "## In the whole sample set (both is_opened=0 & is_opened=1)\n",
        "result_complain=smf.logit(formula=\"is_complained ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df).fit()\n",
        "print(result_complain.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "71383d7e",
      "metadata": {
        "id": "71383d7e",
        "outputId": "a0bbc98a-84da-446c-b284-69c64a3e29f4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.004940\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:          is_complained   No. Observations:               171274\n",
            "Model:                          Logit   Df Residuals:                   171269\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                  0.1004\n",
            "Time:                        22:17:54   Log-Likelihood:                -846.14\n",
            "converged:                      False   LL-Null:                       -940.53\n",
            "Covariance Type:            nonrobust   LLR p-value:                 9.702e-40\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -30.3142   1.66e+04     -0.002      0.999   -3.26e+04    3.26e+04\n",
            "subject_length                  -0.0057      0.009     -0.620      0.535      -0.024       0.012\n",
            "is_email                        24.5377   1.66e+04      0.001      0.999   -3.26e+04    3.26e+04\n",
            "subject_with_personalization   -19.2481   2.22e+04     -0.001      0.999   -4.35e+04    4.35e+04\n",
            "subject_with_deadline            0.0031   1.38e+05   2.26e-08      1.000    -2.7e+05     2.7e+05\n",
            "================================================================================================\n",
            "\n",
            "Possibly complete quasi-separation: A fraction 0.57 of observations can be\n",
            "perfectly predicted. This might indicate that there is complete\n",
            "quasi-separation. In this case some parameters will not be identified.\n"
          ]
        }
      ],
      "source": [
        "## In the opened sample set (only is_opened=1)\n",
        "result_complain=smf.logit(formula=\"is_complained ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df[df.is_opened==1]).fit()\n",
        "print(result_complain.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "34264387",
      "metadata": {
        "id": "34264387",
        "outputId": "95c64347-5c59-4c40-83d7-9e92411f25f4"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.005293\n",
            "         Iterations: 35\n",
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:          is_complained   No. Observations:                14121\n",
            "Model:                          Logit   Df Residuals:                    14117\n",
            "Method:                           MLE   Df Model:                            3\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                0.006269\n",
            "Time:                        22:18:25   Log-Likelihood:                -74.749\n",
            "converged:                      False   LL-Null:                       -75.221\n",
            "Covariance Type:            nonrobust   LLR p-value:                    0.8150\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -22.4011   4497.740     -0.005      0.996   -8837.809    8793.006\n",
            "subject_length                  -0.0087      0.038     -0.232      0.817      -0.082       0.065\n",
            "is_email                        16.2151   4497.739      0.004      0.997   -8799.191    8831.621\n",
            "subject_with_personalization   -16.1781   1.85e+04     -0.001      0.999   -3.62e+04    3.62e+04\n",
            "================================================================================================\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        }
      ],
      "source": [
        "## In the clicked sample set (only is_clicked=1)\n",
        "result_complain=smf.logit(formula=\"is_complained ~ subject_length + is_email + subject_with_personalization\", data=df_click).fit()\n",
        "print(result_complain.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "afda04d3",
      "metadata": {
        "id": "afda04d3",
        "outputId": "082711fa-4a54-47ec-9a2d-7f37d34f841a"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.000049\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:             is_blocked   No. Observations:              1220393\n",
            "Model:                          Logit   Df Residuals:                  1220388\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                  0.1001\n",
            "Time:                        22:19:01   Log-Likelihood:                -60.319\n",
            "converged:                      False   LL-Null:                       -67.026\n",
            "Covariance Type:            nonrobust   LLR p-value:                  0.009417\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                      -16.3201    115.470     -0.141      0.888    -242.638     209.997\n",
            "subject_length                  -0.0963      0.067     -1.437      0.151      -0.228       0.035\n",
            "is_email                        16.2691    115.562      0.141      0.888    -210.229     242.767\n",
            "subject_with_personalization    -4.4675   1958.353     -0.002      0.998   -3842.768    3833.833\n",
            "subject_with_deadline            3.6917   1108.437      0.003      0.997   -2168.805    2176.188\n",
            "================================================================================================\n",
            "\n",
            "Possibly complete quasi-separation: A fraction 1.00 of observations can be\n",
            "perfectly predicted. This might indicate that there is complete\n",
            "quasi-separation. In this case some parameters will not be identified.\n"
          ]
        }
      ],
      "source": [
        "## In the whole sample set (both is_opened=0 & is_opened=1)\n",
        "result_block=smf.logit(formula=\"is_blocked ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df).fit()\n",
        "print(result_block.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "c4eeff05",
      "metadata": {
        "id": "c4eeff05",
        "outputId": "07f7d9c7-c61c-43aa-80e4-79014476bedc"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Warning: Maximum number of iterations has been exceeded.\n",
            "         Current function value: 0.000069\n",
            "         Iterations: 35\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "C:\\Users\\Admin\\anaconda3\\Lib\\site-packages\\statsmodels\\base\\model.py:607: ConvergenceWarning: Maximum Likelihood optimization failed to converge. Check mle_retvals\n",
            "  warnings.warn(\"Maximum Likelihood optimization failed to \"\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                           Logit Regression Results                           \n",
            "==============================================================================\n",
            "Dep. Variable:             is_blocked   No. Observations:               171274\n",
            "Model:                          Logit   Df Residuals:                   171269\n",
            "Method:                           MLE   Df Model:                            4\n",
            "Date:                Mon, 15 Apr 2024   Pseudo R-squ.:                 0.09847\n",
            "Time:                        22:19:10   Log-Likelihood:                -11.766\n",
            "converged:                      False   LL-Null:                       -13.051\n",
            "Covariance Type:            nonrobust   LLR p-value:                    0.6321\n",
            "================================================================================================\n",
            "                                   coef    std err          z      P>|z|      [0.025      0.975]\n",
            "------------------------------------------------------------------------------------------------\n",
            "Intercept                     -148.1326   3.24e+04     -0.005      0.996   -6.37e+04    6.34e+04\n",
            "subject_length                   0.7369     83.823      0.009      0.993    -163.553     165.027\n",
            "is_email                        39.3614   2.95e+04      0.001      0.999   -5.77e+04    5.78e+04\n",
            "subject_with_personalization   -46.4441   4401.420     -0.011      0.992   -8673.068    8580.180\n",
            "subject_with_deadline           45.9356   2.98e+04      0.002      0.999   -5.83e+04    5.84e+04\n",
            "================================================================================================\n",
            "\n",
            "Possibly complete quasi-separation: A fraction 1.00 of observations can be\n",
            "perfectly predicted. This might indicate that there is complete\n",
            "quasi-separation. In this case some parameters will not be identified.\n"
          ]
        }
      ],
      "source": [
        "## In the opened sample set (only is_opened=1)\n",
        "result_block=smf.logit(formula=\"is_blocked ~ subject_length + is_email + subject_with_personalization + subject_with_deadline\", data=df[df.is_opened==1]).fit()\n",
        "print(result_block.summary())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "940676de",
      "metadata": {
        "id": "940676de",
        "outputId": "3f151716-1d10-4f59-9cc6-4c872951222f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "is_blocked\n",
              "0.0    14121\n",
              "Name: count, dtype: int64"
            ]
          },
          "execution_count": 138,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## Cannot test in the clicked sample set (only is_clicked=1)\n",
        "df_click.is_blocked.value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "9f45b3f8",
      "metadata": {
        "id": "9f45b3f8"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "markdown",
      "id": "0fcc9cbf",
      "metadata": {
        "id": "0fcc9cbf"
      },
      "source": [
        "### In the following part, we use classification to get a prediction model. So that we can test user's behavior with several characteristics of the campaign."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "cc5244ff",
      "metadata": {
        "id": "cc5244ff",
        "outputId": "957f9c37-79aa-4897-8b5a-5a1c1257bf6e"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>is_email</th>\n",
              "      <th>total_count</th>\n",
              "      <th>subject_length</th>\n",
              "      <th>subject_with_personalization</th>\n",
              "      <th>subject_with_deadline</th>\n",
              "      <th>subject_with_discount</th>\n",
              "      <th>is_opened</th>\n",
              "      <th>is_clicked</th>\n",
              "      <th>is_unsubscribed</th>\n",
              "      <th>is_complained</th>\n",
              "      <th>is_blocked</th>\n",
              "      <th>is_purchased</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.190830</td>\n",
              "      <td>0.180876</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>-1.721147</td>\n",
              "      <td>-3.739353</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.486073</td>\n",
              "      <td>1.209936</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.938031</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>-1.721147</td>\n",
              "      <td>-3.739353</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220388</th>\n",
              "      <td>1.342821</td>\n",
              "      <td>-1.190830</td>\n",
              "      <td>0.180876</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220389</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.916020</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220390</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.938031</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220391</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.593407</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1220392</th>\n",
              "      <td>-0.744701</td>\n",
              "      <td>0.916020</td>\n",
              "      <td>-0.554167</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>-0.08645</td>\n",
              "      <td>-0.032618</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1220393 rows × 12 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "         is_email  total_count  subject_length  subject_with_personalization  \\\n",
              "0        1.342821    -1.190830        0.180876                     -0.032618   \n",
              "1       -0.744701    -1.721147       -3.739353                     -0.032618   \n",
              "2        1.342821    -1.486073        1.209936                     -0.032618   \n",
              "3       -0.744701     0.938031       -0.554167                     -0.032618   \n",
              "4       -0.744701    -1.721147       -3.739353                     -0.032618   \n",
              "...           ...          ...             ...                           ...   \n",
              "1220388  1.342821    -1.190830        0.180876                     -0.032618   \n",
              "1220389 -0.744701     0.916020       -0.554167                     -0.032618   \n",
              "1220390 -0.744701     0.938031       -0.554167                     -0.032618   \n",
              "1220391 -0.744701     0.593407       -0.554167                     -0.032618   \n",
              "1220392 -0.744701     0.916020       -0.554167                     -0.032618   \n",
              "\n",
              "         subject_with_deadline  subject_with_discount  is_opened  is_clicked  \\\n",
              "0                     -0.08645              -0.032618        0.0         0.0   \n",
              "1                     -0.08645              -0.032618        0.0         0.0   \n",
              "2                     -0.08645              -0.032618        0.0         0.0   \n",
              "3                     -0.08645              -0.032618        0.0         0.0   \n",
              "4                     -0.08645              -0.032618        0.0         0.0   \n",
              "...                        ...                    ...        ...         ...   \n",
              "1220388               -0.08645              -0.032618        0.0         0.0   \n",
              "1220389               -0.08645              -0.032618        0.0         0.0   \n",
              "1220390               -0.08645              -0.032618        0.0         0.0   \n",
              "1220391               -0.08645              -0.032618        0.0         0.0   \n",
              "1220392               -0.08645              -0.032618        0.0         0.0   \n",
              "\n",
              "         is_unsubscribed  is_complained  is_blocked  is_purchased  \n",
              "0                    0.0            0.0         0.0           0.0  \n",
              "1                    0.0            0.0         0.0           0.0  \n",
              "2                    0.0            0.0         0.0           0.0  \n",
              "3                    0.0            0.0         0.0           0.0  \n",
              "4                    0.0            0.0         0.0           0.0  \n",
              "...                  ...            ...         ...           ...  \n",
              "1220388              0.0            0.0         0.0           0.0  \n",
              "1220389              0.0            0.0         0.0           0.0  \n",
              "1220390              0.0            0.0         0.0           0.0  \n",
              "1220391              0.0            0.0         0.0           0.0  \n",
              "1220392              0.0            0.0         0.0           0.0  \n",
              "\n",
              "[1220393 rows x 12 columns]"
            ]
          },
          "execution_count": 139,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_all1 = (df[df_nor.columns[:-1]]-df[df_nor.columns[:-1]].mean()) /df[df_nor.columns[:-1]].std()\n",
        "df_all2 = df[df.columns[3:9]]\n",
        "df_all = pd.concat([df_all1,df_all2],axis=1)\n",
        "df_all"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "5ce99d56",
      "metadata": {
        "id": "5ce99d56"
      },
      "outputs": [],
      "source": [
        "train = df_all.sample(frac = 0.8, random_state = 123) # training sample dataframe\n",
        "test = df_all.drop(train.index).sample(frac = 0.5, random_state = 123) # test sample dataframe\n",
        "validate = df_all.drop(train.index).drop(test.index) # validation sample dataframe"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "02e986c6",
      "metadata": {
        "id": "02e986c6",
        "outputId": "b736e605-7a21-408a-ffd2-ef63c906154d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(976314, 12) (122039, 12) (122040, 12)\n"
          ]
        }
      ],
      "source": [
        "print(train.shape, validate.shape, test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "f7cbdf17",
      "metadata": {
        "id": "f7cbdf17",
        "outputId": "7f004a1c-fa4b-48f7-ffdb-0a449933e89d"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Index(['is_email', 'total_count', 'subject_length',\n",
              "       'subject_with_personalization', 'subject_with_deadline'],\n",
              "      dtype='object')"
            ]
          },
          "execution_count": 155,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "var_name = df_nor.columns.drop(['subject_with_discount','cluster_id'])\n",
        "var_name"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "42266bc7",
      "metadata": {
        "id": "42266bc7",
        "outputId": "726c17ec-de67-45da-e816-688e777b2e7b"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([0., 0., 0., ..., 0., 0., 0.])"
            ]
          },
          "execution_count": 156,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "## Prediction using the logistic regression model\n",
        "lr_model = LogisticRegression()\n",
        "lr = lr_model.fit(train[var_name], train[\"is_opened\"])\n",
        "lr.predict_proba(validate[var_name])\n",
        "lr.predict(validate[var_name])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "d296e244",
      "metadata": {
        "id": "d296e244"
      },
      "outputs": [],
      "source": [
        "## Prediction using the decision tree model\n",
        "from sklearn.tree import DecisionTreeClassifier, export_graphviz, plot_tree\n",
        "\n",
        "clf_model_1 = DecisionTreeClassifier(max_depth=8, criterion=\"gini\",min_samples_leaf=5)\n",
        "clf_1 = clf_model_1.fit(train[var_name], train[\"is_opened\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "26050fc6",
      "metadata": {
        "id": "26050fc6",
        "outputId": "166f360a-68ef-413d-c738-f703dee94ad6"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Logistic Regression: 0.8606511033358188 CART: 0.8606511033358188\n"
          ]
        }
      ],
      "source": [
        "validate[\"pred_logitstic\"] = lr.predict(validate[var_name])\n",
        "validate[\"pred_cart\"] = clf_1.predict(validate[var_name])\n",
        "validate[\"true\"] = validate[\"is_opened\"]\n",
        "\n",
        "hr_cart = sum(validate[\"pred_cart\"] == validate[\"true\"]) / len(validate[\"true\"])\n",
        "hr_lr = sum(validate[\"pred_logitstic\"] == validate[\"true\"]) / len(validate[\"true\"])\n",
        "print(\"Logistic Regression:\", hr_lr,\"CART:\", hr_cart)"
      ]
    },
    {
      "cell_type": "markdown",
      "id": "7c89b090",
      "metadata": {
        "id": "7c89b090"
      },
      "source": [
        "Here shows an example of using two different models to predict the \"open\" behavior of users. We can find that the deicison tree model is more accurate though the prediction accuracy is still not high enough with 64% accuracy rate. We think the main reason is that the number of factors used for prediction is limited, there are also some other models which can give more accurate prediction results. With more factors and more accurate model, the company can predict more other behaviors of users in the future."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "id": "22c89565",
      "metadata": {
        "id": "22c89565"
      },
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.5"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}